/*
      timeout: 0,
      data: null,
      dataType: null,
      username: null,
      password: null,
      cache: null,
      throws: false,
      traditional: false,
      headers: {},
      */

/*
     _ _      _       _
 ___| (_) ___| | __  (_)___
/ __| | |/ __| |/ /  | / __|
\__ \ | | (__|   < _ | \__ \
|___/_|_|\___|_|\_(_)/ |___/
                   |__/

 Version: 1.8.1
  Author: Ken Wheeler
 Website: http://kenwheeler.github.io
    Docs: http://kenwheeler.github.io/slick
    Repo: http://github.com/kenwheeler/slick
  Issues: http://github.com/kenwheeler/slick/issues

 */

/*
   * Create a callback list using the following parameters:
   *
   *	options: an optional list of space-separated options that will change how
   *			the callback list behaves or a more traditional option object
   *
   * By default a callback list will act like an event callback list and can be
   * "fired" multiple times.
   *
   * Possible options:
   *
   *	once:			will ensure the callback list can only be fired once (like a Deferred)
   *
   *	memory:			will keep track of previous values and will call any callback added
   *					after the list has been fired right away with the latest "memorized"
   *					values (like a Deferred)
   *
   *	unique:			will ensure a callback can only be added once (no duplicate in the list)
   *
   *	stopOnFalse:	interrupt callings when a callback returns false
   *
   */

/*
   * Helper functions for managing events -- not part of the public interface.
   * Props to Dean Edwards' addEvent library for many of the ideas.
   */

/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/

/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */

/*  */

/* Attributes
      ---------------------------------------------------------------------- */

/* Chain conversions given the request and the original response
   * Also sets the responseXXX fields on the jqXHR instance
   */

/* Contains
      ---------------------------------------------------------------------- */

/* DOCUMENT */

/* Handles responses to an ajax request:
   * - finds the right dataType (mediates between content-type and expected dataType)
   * - returns the corresponding response
   */

/* Internal Use Only */

/* Prefilters
   * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
   * 2) These are called:
   *    - BEFORE asking for a transport
   *    - AFTER param serialization (s.data is a string if s.processData is true)
   * 3) key is the dataType
   * 4) the catchall symbol "*" can be used
   * 5) execution will start with transport dataType and THEN continue down to "*" if needed
   */

/* QSA/matchesSelector
      ---------------------------------------------------------------------- */

/* Sorting
      ---------------------------------------------------------------------- */

/* Transports bindings
   * 1) key is the dataType
   * 2) the catchall symbol "*" can be used
   * 3) selection will start with transport dataType and THEN go to "*" if needed
   */

/* asRootData */

/* default */

/* default.locals */

/* direct */

/* eslint no-unused-expressions: "off" */

/* eslint-disable eqeqeq */

/* eslint-disable no-cond-assign */

/* eslint-disable no-loop-func */

/* eslint-disable no-proto */

/* eslint-disable no-self-compare */

/* eslint-disable no-unused-vars */

/* eslint-enable eqeqeq */

/* eslint-enable no-cond-assign */

/* eslint-enable no-loop-func */

/* eslint-enable no-proto */

/* eslint-enable no-self-compare */

/* eslint-enable no-unused-vars */

/* getElement(s)By*
      ---------------------------------------------------------------------- */

/* getStatic */

/* global Symbol */

/* global window, document, define, jQuery, setInterval, clearInterval */

/* harmony default export */

/* harmony export */

/* harmony import */

/* hydrating */

/* isRenderWatcher */

/* istanbul ignore else */

/* istanbul ignore if  */

/* istanbul ignore if */

/* istanbul ignore next  */

/* istanbul ignore next */

/* istanbul ignore next, $flow-disable-line */

/* jshint -W018 */

/* matches from matchExpr["CHILD"]
          	1 type (only|nth|...)
          	2 what (child|of-type)
          	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
          	4 xn-component of xn+y argument ([+-]?\d*n|)
          	5 sign of xn-component
          	6 x of xn-component
          	7 sign of y-component
          	8 y of y-component
          */

/* module decorator */

/* removeOnly */

/* scoped */

/* script */

/* server only */

/* style */

/* true */

/* webpack/runtime/compat get default export */

/* コンポーネント */

/* ページ独自 */

/* ライブラリー */

/*!
   * Sizzle CSS Selector Engine v2.3.6
   * https://sizzlejs.com/
   *
   * Copyright JS Foundation and other contributors
   * Released under the MIT license
   * https://js.foundation/
   *
   * Date: 2021-02-16
   */

/*!
 * Vue.js v2.6.14
 * (c) 2014-2021 Evan You
 * Released under the MIT License.
 */

/*!
 * jQuery JavaScript Library v3.6.0
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright OpenJS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2021-03-02T17:08Z
 */

/*#__PURE__*/

/**
             * try to load the image 3 times,
             * leave a slight delay so we don't get
             * servers blocking the request.
             */

/**
           * try to load the image 3 times,
           * leave a slight delay so we don't get
           * servers blocking the request.
           */

/**
       * @param {DOMRect|ClientRect} boundingClientRect
       * @param {DOMRect|ClientRect} intersectionRect
       */

/**
       * accepts arguments in format of:
       *
       *  - for changing a single option's value:
       *     .slick("setOption", option, value, refresh )
       *
       *  - for changing a set of responsive options:
       *     .slick("setOption", 'responsive', [{}, ...], refresh )
       *
       *  - for updating multiple values at once (not responsive)
       *     .slick("setOption", { 'option': value, ... }, refresh )
       */

/**
     * A low-level selection function that works with Sizzle's compiled
     *  selector functions
     * @param {String|Function} selector A selector or a pre-compiled
     *  selector function built with Sizzle.compile
     * @param {Element} context
     * @param {Array} [results]
     * @param {Array} [seed] A set of elements to match against
     */

/**
     * Adds the same handler for all of the specified attrs
     * @param {String} attrs Pipe-separated list of attributes
     * @param {Function} handler The method that will be applied
     */

/**
     * Checks a node for validity as a Sizzle context
     * @param {Element|Object=} context
     * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
     */

/**
     * Checks document order of two siblings
     * @param {Element} a
     * @param {Element} b
     * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
     */

/**
     * Create key-value caches of limited size
     * @returns {function(string, object)} Returns the Object data after storing it on itself with
     *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
     *	deleting the oldest entry
     */

/**
     * Detects XML nodes
     * @param {Element|Object} elem An element or a document
     * @returns {Boolean} True iff elem is a non-HTML XML node
     */

/**
     * Document sorting and removing duplicates
     * @param {ArrayLike} results
     */

/**
     * Mark a function for special use by Sizzle
     * @param {Function} fn The function to mark
     */

/**
     * Returns a function to use in pseudos for :enabled/:disabled
     * @param {Boolean} disabled true for :disabled; false for :enabled
     */

/**
     * Returns a function to use in pseudos for buttons
     * @param {String} type
     */

/**
     * Returns a function to use in pseudos for input types
     * @param {String} type
     */

/**
     * Returns a function to use in pseudos for positionals
     * @param {Function} fn
     */

/**
     * Sets document-related variables once based on the current document
     * @param {Element|Object} [doc] An element or document object to use to set the document
     * @returns {Object} Returns the current document
     */

/**
     * Support testing using an element
     * @param {Function} fn Passed the created element and returns a boolean result
     */

/**
     * Utility function for retrieving the text value of an array of DOM nodes
     * @param {Array|Element} elem
     */

/**
     * accepts arguments in format of:
     *
     *  - for changing a single option's value:
     *     .slick("setOption", option, value, refresh )
     *
     *  - for changing a set of responsive options:
     *     .slick("setOption", 'responsive', [{}, ...], refresh )
     *
     *  - for updating multiple values at once (not responsive)
     *     .slick("setOption", { 'option': value, ... }, refresh )
     */

/**
   * A local reference to the root document.
   */

/**
   * Accepts a rect and expands it by the rootMargin value.
   * @param {DOMRect|ClientRect} rect The rect object to expand.
   * @return {ClientRect} The expanded rect.
   * @private
   */

/**
   * Accepts a target and root rect computes the intersection between then
   * following the algorithm in the spec.
   * TODO(philipwalton): at this time clip-path is not considered.
   * https://w3c.github.io/IntersectionObserver/#calculate-intersection-rect-algo
   * @param {Element} target The target DOM element
   * @param {Object} targetRect The bounding rect of the target.
   * @param {Object} rootRect The bounding rect of the root after being
   *     expanded by the rootMargin value.
   * @return {?Object} The final intersection rect object or undefined if no
   *     intersection is found.
   * @private
   */

/**
   * Accepts an old and new entry and returns true if at least one of the
   * threshold values has been crossed.
   * @param {?IntersectionObserverEntry} oldEntry The previous entry for a
   *    particular target element or null if no previous entry exists.
   * @param {IntersectionObserverEntry} newEntry The current entry for a
   *    particular target element.
   * @return {boolean} Returns true if a any threshold has been crossed.
   * @private
   */

/**
   * Accepts the rootMargin value from the user configuration object
   * and returns an array of the four margin values as an object containing
   * the value and unit properties. If any of the values are not properly
   * formatted or use a unit other than px or %, and error is thrown.
   * @private
   * @param {string=} opt_rootMargin An optional rootMargin value,
   *     defaulting to '0px'.
   * @return {Array<Object>} An array of margin objects with the keys
   *     value and unit.
   */

/**
   * Accepts the threshold value from the user configuration object and
   * returns a sorted array of unique threshold values. If a value is not
   * between 0 and 1 and error is thrown.
   * @private
   * @param {Array|number=} opt_threshold An optional threshold value or
   *     a list of threshold values, defaulting to [0].
   * @return {Array} A sorted list of unique and valid threshold values.
   */

/**
   * Adds an event handler to a DOM node ensuring cross-browser compatibility.
   * @param {Node} node The DOM node to add the event handler to.
   * @param {string} event The event name.
   * @param {Function} fn The event handler to add.
   * @param {boolean} opt_useCapture Optionally adds the even to the capture
   *     phase. Note: this only works in modern browsers.
   */

/**
   * Adds the instance to the global IntersectionObserver registry if it isn't
   * already present.
   * @private
   */

/**
   * An IntersectionObserver registry. This registry exists to hold a strong
   * reference to IntersectionObserver instances currently observing a target
   * element. Without this registry, instances without another reference may be
   * garbage collected.
   */

/**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */

/**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */

/**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */

/**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */

/**
   * Checks to see if a parent element contains a child element (including inside
   * shadow DOM).
   * @param {Node} parent The parent element.
   * @param {Node} child The child element.
   * @return {boolean} True if the parent node contains the child node.
   */

/**
   * Class inheritance
   */

/**
   * Create asset registration methods.
   */

/**
   * Creates the global IntersectionObserver constructor.
   * https://w3c.github.io/IntersectionObserver/#intersection-observer-interface
   * @param {Function} callback The function to be invoked after intersection
   *     changes have queued. The function is not invoked if the queue has
   *     been emptied by calling the `takeRecords` method.
   * @param {Object=} opt_options Optional configuration options.
   * @constructor
   */

/**
   * Creates the global IntersectionObserverEntry constructor.
   * https://w3c.github.io/IntersectionObserver/#intersection-observer-entry
   * @param {Object} entry A dictionary of instance properties.
   * @constructor
   */

/**
   * Custom user key aliases for v-on
   */

/**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */

/**
   * Ensure that the result has all of the necessary fields of the DOMRect.
   * Specifically this ensures that `x` and `y` fields are set.
   *
   * @param {?DOMRect|?ClientRect} rect
   * @return {?DOMRect}
   */

/**
   * Error handler for watcher errors
   */

/**
   * Exposed for legacy reasons
   */

/**
   * Get the namespace of an element
   */

/**
   * Gets the parent node of an element or its host element if the parent node
   * is a shadow root.
   * @param {Node} node The node whose parent to get.
   * @return {Node|null} The parent node or null if no parent exists.
   */

/**
   * Ignore certain custom elements
   */

/**
   * Inverts the intersection and bounding rect from the parent (frame) BCR to
   * the local BCR space.
   * @param {DOMRect|ClientRect} parentBoundingRect The parent's bound client rect.
   * @param {DOMRect|ClientRect} parentIntersectionRect The parent's own intersection rect.
   * @return {ClientRect} The local root bounding rect for the parent's children.
   */

/**
   * Load a url into a page
   */

/**
   * Option merge strategies (used in core/util/options)
   */

/**
   * Parse the real tag name for the specific platform.
   */

/**
   * Perform updates asynchronously. Intended to be used by Vue Test Utils
   * This will significantly reduce performance if set to false.
   */

/**
   * Removes a previously added event handler from a DOM node.
   * @param {Node} node The DOM node to remove the event handler from.
   * @param {string} event The event name.
   * @param {Function} fn The event handler to remove.
   * @param {boolean} opt_useCapture If the event handler was added with this
   *     flag set to true, it should be set to true here in order to remove it.
   */

/**
   * Removes the instance from the global IntersectionObserver registry.
   * @private
   */

/**
   * Resets the cross-origin mode.
   */

/**
   * Returns an empty rect object. An empty rect is returned when an element
   * is not in the DOM.
   * @return {ClientRect} The empty rect.
   */

/**
   * Returns any queue entries that have not yet been reported to the
   * callback and clears the queue. This can be used in conjunction with the
   * callback to obtain the absolute most up-to-date intersection information.
   * @return {Array} The currently queued entries.
   */

/**
   * Returns the embedding frame element, if any.
   * @param {!Document} doc
   * @return {!Element}
   */

/**
   * Returns the intersection between two rect objects.
   * @param {Object} rect1 The first rect.
   * @param {Object} rect2 The second rect.
   * @return {?Object|?ClientRect} The intersection rect or undefined if no
   *     intersection is found.
   */

/**
   * Returns the root rect after being expanded by the rootMargin value.
   * @return {ClientRect} The expanded root rect.
   * @private
   */

/**
   * Returns true if `node` is a Document.
   * @param {!Node} node
   * @returns {boolean}
   */

/**
   * Returns whether or not the root element is an element and is in the DOM.
   * @return {boolean} True if the root element is an element and is in the DOM.
   * @private
   */

/**
   * Returns whether or not the target element is a child of root.
   * @param {Element} target The target element to check.
   * @return {boolean} True if the target element is a child of root.
   * @private
   */

/**
   * Scans each observation target for intersection changes and adds them
   * to the internal entries queue. If new entries are found, it
   * schedules the callback to be invoked.
   * @private
   */

/**
   * Sets up the polyfill in the cross-origin mode. The result is the
   * updater function that accepts two arguments: `boundingClientRect` and
   * `intersectionRect` - just as these fields would be available to the
   * parent via `IntersectionObserverEntry`. This function should be called
   * each time the iframe receives intersection information from the parent
   * window, e.g. via messaging.
   * @return {function(DOMRect|ClientRect, DOMRect|ClientRect)}
   */

/**
   * Shims the native getBoundingClientRect for compatibility with older IE.
   * @param {Element} el The element whose bounding rect to get.
   * @return {DOMRect|ClientRect} The (possibly shimmed) rect of the element.
   */

/**
   * Show production mode tip message on boot?
   */

/**
   * Starts observing a target element for intersection changes based on
   * the thresholds values.
   * @param {Element} target The DOM element to observe.
   */

/**
   * Starts polling for intersection changes if the polling is not already
   * happening, and if the page's visibility state is visible.
   * @param {!Document} doc
   * @private
   */

/**
   * Stops observing a target element for intersection changes.
   * @param {Element} target The DOM element to observe.
   */

/**
   * Stops observing all target elements for intersection changes.
   */

/**
   * Stops polling for intersection changes.
   * @param {!Document} doc
   * @private
   */

/**
   * The frequency in which the polyfill polls for intersection changes.
   * this can be updated on a per instance basis and must be set prior to
   * calling `observe` on the first target.
   */

/**
   * The minimum interval within which the document will be checked for
   * intersection changes.
   */

/**
   * Use a mutation observer on the root element
   * to detect intersection changes.
   */

/**
   * Warn handler for watcher warns
   */

/**
   * Whether to enable devtools
   */

/**
   * Whether to record perf
   */

/**
   * Whether to suppress warnings.
   */

/**
 *
 * JSのモジュールを読み込む
 */

/**
 *
 * プラグイン・ライブラリの読み込み
 */

/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */

/**
 * Add a dependency to this directive.
 */

/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */

/**
 * Always return false.
 */

/**
 * Assert whether a prop is valid.
 */

/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */

/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */

/**
 * Augment a target Object or Array by defining
 * hidden properties.
 */

/**
 * Augment a target Object or Array by intercepting
 * the prototype chain using __proto__
 */

/**
 * Camelize a hyphen-delimited string.
 */

/**
 * Check if a string starts with $ or _
 */

/**
 * Check if a tag is a built-in tag.
 */

/**
 * Check if an attribute is a reserved attribute.
 */

/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */

/**
 * Check if val is a valid array index.
 */

/**
 * Check if value is primitive.
 */

/**
 * Check whether an object has the property.
 */

/**
 * Clean up for dependency collection.
 */

/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */

/**
 * Convert HTML string to AST.
 */

/**
 * Convert a value to a string that is actually rendered.
 */

/**
 * Convert an Array-like object to a real Array.
 */

/**
 * Convert an input value to a number for persistence.
 * If the conversion fails, return original string.
 */

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.
 *
 *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document
 *
 */

/**
 * Create a cached version of a pure function.
 */

/**
 * Cross-platform code generation for component v-model
 */

/**
 * Cross-platform codegen helper for generating v-model value assignment code.
 */

/**
 * Data
 */

/**
 * Default strategy.
 */

/**
 * Define a property.
 */

/**
 * Define a reactive property on an Object.
 */

/**
 * Delete a property and trigger change if necessary.
 */

/**
 * Depend on all deps collected by this watcher.
 */

/**
 * Ensure a function is called only once.
 */

/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */

/**
 * Evaluate the getter, and re-collect dependencies.
 */

/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */

/**
 * Flush both queues and run the watchers.
 */

/**
 * Generate a string containing static keys from compiler modules.
 */

/**
 * Get outerHTML of elements, taking care
 * of SVG elements in IE as well.
 */

/**
 * Get the default value of a prop.
 */

/**
 * Get the raw type string of a value, e.g., [object Object].
 */

/**
 * Goal of the optimizer: walk the generated template AST tree
 * and detect sub-trees that are purely static, i.e. parts of
 * the DOM that never needs to change.
 *
 * Once we detect these sub-trees, we can:
 *
 * 1. Hoist them into constants, so that we no longer need to
 *    create fresh nodes for them on each re-render;
 * 2. Completely skip them in the patching process.
 */

/**
 * Helper that recursively merges two data objects together.
 */

/**
 * Hooks and props are merged as arrays.
 */

/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */

/**
 * Intercept mutating methods and emit events
 */

/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */

/**
 * Merge an Array of Objects into a single Object.
 */

/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */

/**
 * Mix properties into target object.
 */

/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */

/**
 * Normalize all injections into Object-based format
 */

/**
 * Normalize raw function directives into object format.
 */

/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

/**
 * Observe a list of Array items.
 */

/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */

/**
 * Options with restrictions
 */

/**
 * Other object hashes.
 */

/**
 * Parse a v-model expression into a base path and a final key segment.
 * Handles both dot-path and possible square brackets.
 *
 * Possible cases:
 *
 * - test
 * - test[key]
 * - test[test1[key]]
 * - test["a"][key]
 * - xxx.test[a[a].test1[key]]
 * - test.xxx.a["asa"][test1[key]]
 *
 */

/**
 * Parse simple path.
 */

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
 */

/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */

/**
 * Query an element selector if it's not an element already.
 */

/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */

/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */

/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */

/**
 * Remove an item from an array.
 */

/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */

/**
 * Remove self from all dependencies' subscriber list.
 */

/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */

/**
 * Return the first index at which a loosely equal value can be
 * found in the array (if value is a plain object, the array must
 * contain an object of the same shape), or -1 if it is not present.
 */

/**
 * Return the same value.
 */

/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */

/**
 * Runtime helper for rendering <slot>
 */

/**
 * Runtime helper for rendering static trees.
 */

/**
 * Runtime helper for rendering v-for lists.
 */

/**
 * Runtime helper for resolving filters
 */

/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */

/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */

/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */

/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */

/**
 * Simple bind polyfill for environments that do not support it,
 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
 * since native bind is now performant enough in most browsers.
 * But removing it would mean breaking code that was able to run in
 * PhantomJS 1.x, so this must be kept for backward compatibility.
 */

/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */

/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */

/**
 * TOPの商品一覧用
 */

/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */

/**
 * Validate component names
 */

/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */

/**
 * Walk through all properties and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */

/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */

/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */

/** @private @const {!Array<!Document>} */

/** @private @const {!Array<function()>} */

/************************************************************************/

/******/

/***/

//

//    - Any

//    - Node.DOCUMENT_NODE

//    - Node.ELEMENT_NODE

//    created before the child)

//    documentElement of the parent window

//    its watchers can be skipped.

//    user watchers are created before the render watcher)

//   .css('--customProperty) (#3144)

//   .css('filter') (IE 9 only, #12537)

//   1. An object of properties

//   1. No key was specified

//   1. The entire cache object

//   2. A key and value

//   2. A string key was specified, but no value provided

//   2. The data stored at the key

//   but not by others (comment: 8; processing instruction: 7; etc.)

//   https://html.spec.whatwg.org/multipage/forms.html#category-listed

//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled

//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled

//  - Node

//  - Object

//  nested

// "

// "$stable" marker.

// "Attribute values must be CSS identifiers [capture 5]

// "Software"), to deal in the Software without restriction, including

// "Whether an element is represented by a :lang() selector

// "force" the microtask queue to be flushed by adding an empty timer.

// "px" to a few hardcoded values.

// "touch" every property so they are all tracked as

// #1450: sometimes IE returns 1223 when it should be 204

// #14683: Only rethrow if this hasn't been notified as an error yet

// #3663: IE encodes newlines inside attribute values while other browsers don't

// #3895, #4268

// #4391: in IE9, setting type can reset value for input[type=radio]

// #6157

// #6513

// #6574 in case the inject object is observed...

// #6601 work around Chrome version <= 55 bug where single textNode

// #6666: IE/Edge forces progress value down to 1 before setting a max

// #6828: chrome encodes content in a[href]

// #6887 firefox doesn't update muted state if set via attribute

// #6903

// #7138: IE10 & 11 fires input event when setting placeholder on

// #7573 disable dep collection when invoking data getters

// #7573 disable dep collection when invoking lifecycle hooks

// #7806: IE11 uses key names without `Arrow` prefix for arrow keys.

// #7817 clone node before setting fnContext, otherwise if the node is reused

// #7880: IE11 and Edge use `Esc` for Escape key name.

// #7975

// #9112: IE11 uses `Del` for Delete key name.

// #9112: IE11 uses `Spacebar` for Space key name.

// #9438, #9506

// #9441: can't use 'keyCode' in $event because Chrome autofill fires fake

// #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp

// #9448 bail if event is fired in another document in a multi-page

// #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState

// #9534: if a component with scoped slots is inside a conditional branch,

// #9681 QtWebEngine event.timeStamp is negative value

// #9682: remove data so that it's not used in an eventual retry

// #で始まるa要素をクリックした場合に処理

// $attrs & $listeners are exposed for easier HOC creation.

// $flow-disable-line

// '

// (

// ( event )  dispatched jQuery.Event

// ( namespace ) or ( selector, types [, fn] )

// ( types [, fn] )

// ( types, data, fn )

// ( types, fn )

// ( types, selector, fn )

// ( types-Object, data )

// ( types-Object, selector, data )

// ( types-object [, selector] )

// (#6466 MutationObserver is unreliable in IE11)

// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)

// () => Promise

// (and therefore has an element appears at this[ 0 ]) and the

// (async resolves are shimmed as synchronous during SSR)

// (avoids potential for endless recursion during removal of special event handlers)

// (e.g. #6813, out-in transitions).

// (e.g. it was from a cached normal slot) the fnContext causes named slots

// (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)

// (excepting DocumentFragment context, where the methods don't exist)

// (excepting IE8 booleans)

// (focus and blur are always synchronous in other supported browsers,

// (focus or blur), assume that the surrogate already propagated from triggering the

// (i.e., `typeof document.createElement( "object" ) === "function"`).

// (it can always be set on a per-request basis or even using ajaxSetup)

// (no matter how long the jqXHR object will be used)

// (relative to UNIX epoch), so in order to compare time we have to use the

// (returning the new matched element set)

// (such as Node.js), expose a factory as module.exports.

// (the latter of which guarantees us context)

// (via `this.document`) & document (via `this`).

// (we check in cache first)

// )

// * false: [ value ].slice( 0 ) => resolve( value )

// * listed form-associated elements in a disabled fieldset

// * option elements in a disabled optgroup

// * true: [ value ].slice( 1 ) => resolve()

// *native* events that it fires directly, ensuring that state changes have

// ... .then handlers, argument index, [final state]

// ...and capture the result

// ...and disregard older resolution values

// ...but misinterprets leading-number strings, particularly hex literals ("0x...")

// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)

// ...in a gzip-friendly way

// ...intermediate processing is necessary

// ...otherwise use results directly

// .get() because push.apply(_, arraylike) throws on ancient WebKit

// /

// 0: no normalization needed

// 1) For the element inside the iframe without offsetParent, this method will return

// 1. Components are updated from parent to child. (because parent is always

// 1. Copy private data: events, handlers, etc.

// 1. When the children contains components - because a functional component

// 1. components not able to mutate slot nodes

// 1: simple normalization needed (possible 1-level deep nested array)

// 2) For the hidden or detached element

// 2. A component's user watchers are run before its render watcher (because

// 2. Copy user data

// 2. When the children contains constructs that always generated nested Arrays,

// 2. add radio else-if condition

// 2. static slot content fails for hot-reloading

// 2.2 with runInNewContext: true

// 2.3 injection

// 2.6 explicit observable API

// 2.6 v-slot syntax

// 2: full normalization needed

// 3) For body or html element, i.e. in case of the html node - it will return itself

// 3. If a component is destroyed during a parent component's watcher run,

// 3. other

// :(first|last|only)-(child|of-type)

// :class are used on slot nodes

// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),

// < in plain text, be forgiving and treat it as text

// <object> elements with no `data` attribute has an object

// <textarea>... block the first input event and remove the blocker

// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805

// @see https://github.com/webpack-contrib/style-loader/issues/177

// A 0-size cross-origin intersection means no-intersection.

// A IE's `ClientRect` type does not have `x` and `y`. The same is the case

// A `DOMRect` object has `x` and `y` fields.

// A central reference to the root jQuery(document)

// A counter to track how many items to wait for before

// A cross-domain request is in order when the origin doesn't match the current origin.

// A fallback to window.onload, that will always work

// A global GUID counter for objects

// A major drawback of this tradeoff is that there are some scenarios

// A match means we're done; a fail means we have to keep checking

// A simple way to check for HTML strings

// A special extend for ajax options

// A tribute to the "awesome hack by Dean Edwards"

// AFTER it was attached.

// Abort any current/pending executions

// Abort any pending executions

// Abort handling of the native event

// Abort if not done already and return

// Abort if there are pending holds or we're already ready

// Aborting is no longer a cancellation

// Accept quoted arguments as-is

// Accepts only:

// Accessing document.activeElement can throw unexpectedly

// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)

// Accessing the selectedIndex property

// Accessing this property makes selected-by-default

// Account for positive content-box scroll gutter when requested by providing computedVal

// Account for the *real* offset parent, which can be the document or its root element

// Account for unreliable border-box dimensions by comparing offset* to computed and

// Actual Callbacks object

// Actual callback list

// Add a callback or a collection of callbacks to the list

// Add a progress sentinel to prevent the fx queue from being

// Add button/input type pseudos

// Add elements passing elementMatchers directly to results

// Add elements to results, through postFinder if defined

// Add in properties whose names you wish to fix before

// Add in style property hooks for overriding the default

// Add list-specific methods

// Add matches to results

// Add nodes directly

// Add or update anti-cache param if needed

// Add padding

// Add protocol if not provided (prefilters might expect it)

// Add the old object onto the stack (as a reference)

// Add the remaining (directly-bound) handlers

// Add the top/left cssHooks using jQuery.fn.position

// Add to the element's handler list, delegates in front

// Adding a temporary attribute to the document before the selection works

// Adjust for the element's box model

// Adjustment may not be necessary

// Alias method option to type as per ticket #12004

// All IE versions use low-res event timestamps, and have problematic clock

// All done!

// All others

// All such elements have a "form" property.

// Allow custom headers/mimetypes and early abort

// Allow instantiation without the 'new' keyword

// Allow onerror to be called first,

// Allow special events to draw outside the lines

// Also disable .add unless we have memory (since it would have no effect)

// Also monitor the parent.

// Also prevent it if we're currently inside a leveraged native-event stack

// Also unmonitor the parent.

// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)

// Also, save errorCallback to a variable

// Also, using (macro) tasks in event handler would cause some weird behaviors

// Always assume duplicates if they aren't passed to the comparison function

// Always return an empty object.

// Always skip document fragments

// Always use camelCase key (gh-2257)

// An input loses its value after becoming a radio

// Anchor tag for parsing the document origin

// Anchor's host property isn't correctly set when s.url is relative

// Android Browser returns percentage for some values,

// Animate inline elements as inline-block

// Animations created synchronously will run synchronously

// Any relative (+/-) values have already been

// Append to fragment

// Apply converter (if not an equivalence)

// Apply custom fields if provided

// Apply extends and mixins on the child options,

// Apply postFilter

// Apply prefilters

// Apply relative offset (+=/-=) if specified

// Apply set filters to unmatched elements

// Apply the dataFilter if provided

// Argument "data" should be string of html

// Arraylike of elements (jQuery, arguments, Array)

// As in, an element does not contain itself

// As of jQuery 3.0, isNumeric is limited to

// As well, disconnected nodes are said to be in a document

// Assign to newCache so results back-propagate to previous elements

// Assign undefined instead of using delete, see Data#remove

// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes

// Assume jQuery is ready without the ready module

// Assume position:fixed implies availability of getBoundingClientRect

// Assume that strings that start and end with <> are HTML and skip the regex check

// Assumes a single number if not a string

// Assuming integer scroll gutter, subtract the rest and round down

// Async edge case #6566 requires saving the timestamp when event listeners are

// Async edge case fix requires storing an event listener's attach timestamp.

// Attach a single capturing handler on the document while someone wants focusin/focusout

// Attach callbacks from options

// Attach deferreds

// Attempt to "discover" the data in

// Attempt to get data from the cache

// Attribute hooks are determined by the lowercase version

// Attribute names can contain non-HTML whitespace characters

// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors

// Avoid an infinite loop by temporarily removing this function from the getter

// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression

// Avoid hanging onto element (issue #299)

// Back compat <1.8 extension point

// Bail out if this is a no-op like .hide().hide()

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport

// Base inspection function for prefilters and transports

// Based off of the plugin by Clint Helfers, with permission.

// Based on the AutoRuby library created by:

// Because of that, this security measure has to be disabled in Safari 8.

// Behaves like an Array's method, not like a jQuery method.

// Behavior in IE 9 is more subtle than in newer versions & it passes

// Bind a function to a context, optionally partially applying any

// Bind script tag hack transport

// Binds and throttles `this._checkForIntersections`.

// Black-hole SVG <use> instance trees (trac-13180)

// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347

// Boolean attributes and "value" are not treated correctly

// Boolean properties

// Both box models exclude margin

// Browser environment sniffing

// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)

// Build QSA regex

// Build a new jQuery matched element set

// Building a settings object

// Builds headers hashtable if needed

// Bulk operations run against the entire set

// But maintain support for old signatures

// By default it does NOT remove it from the map (attrsMap) because the map is

// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too

// CONCATENATED MODULE: ./assets/scripts/components/accordion-qa.js

// CONCATENATED MODULE: ./assets/scripts/components/anchor-link.js

// CONCATENATED MODULE: ./assets/scripts/components/fontSize.js

// CONCATENATED MODULE: ./assets/scripts/components/hamburger.js

// CONCATENATED MODULE: ./assets/scripts/components/kana.js

// CONCATENATED MODULE: ./assets/scripts/components/modal.js

// CONCATENATED MODULE: ./assets/scripts/index.js

// CONCATENATED MODULE: ./assets/scripts/lib/autoKana.js

// CONCATENATED MODULE: ./assets/scripts/page/reserve.js

// CONCATENATED MODULE: ./node_modules/vue-slick/dist/slickCarousel.esm.js

// CONCATENATED MODULE: ./node_modules/vue/dist/vue.esm.js

// CSS escapes

// CSS string/identifier serialization

// CSS transitions. Since the element may be inside an entering

// Cache response headers

// Cache the compiled function

// Cache the index of each encountered element

// Cache the tokens

// Caches the header

// Calculate position if both inputs belong to the same document

// Calculates the intersection ratio.

// Call a native DOM method on the target with the same name as the event.

// Call all callbacks with the given context and arguments

// Call all the callbacks with the given arguments

// Call an optional hook to record the stack, in case of exception

// Call given func if any

// Call if it was a function and we have a response

// Call the postDispatch hook for the mapped type

// Call the preDispatch hook for the mapped type, and let it bail if desired

// Callback

// Callback for when everything is done

// Callbacks context

// Caller can pass in a jQuery.Event object, Object, or just an event type string

// Caller can pass in an object of custom data in lieu of the handler

// Can add propHook for "elements" to filter or add form elements

// Can be adjusted by the user

// Can use an empty set, since event contains the info

// Can't trust NodeList.length

// Cancel the outer synthetic event

// Cancel the request

// Capture executables

// Capture the context ID, setting it first if necessary

// Cast descendant combinators to space

// Catch cases where $(document).ready() is called

// Certain elements can have dimension info if we invisibly show them

// Check against all ancestor/preceding elements

// Check against closest ancestor/preceding element

// Check attachment across shadow DOM boundaries when possible (gh-3504)

// Check each className given, space separated list

// Check for headers option

// Check for inherited disabledness on relevant non-disabled elements:

// Check for promise aspect first to privilege synchronous behavior

// Check for vendor prefixed names

// Check if a given callback is in the list.

// Check if any dependent targets are still remaining.

// Check if b follows a

// Check if getElementById returns elements by name

// Check if getElementsByTagName("*") returns only elements

// Check if module is in cache

// Check if the owner object already has a cache

// Check if the request came from the browser and is not server rendered

// Check if there's a frame that can be navigated to.

// Check if we're dealing with a known content-type

// Check if we're setting a value

// Check readyState before timeout as it changes

// Check state lost if the name is set (#11217)

// Check to see if it's possible to do matchesSelector

// Check to see if we have a response for the expected dataType

// Choose the first element that is related to our preferred document

// Claim the first handler

// Class

// Class selector

// Clean up any remaining tags

// Clean up if we're done firing for good

// Clean up the event in case it is being reused

// Clean-up function (fires after converters)

// Clear all callbacks and values

// Clear input after sorting to release objects

// Clear timeout if it exists

// Clear up the last queue stop function

// Clone any incoming data and prepend the event, creating the handler arg list

// Close all the open elements, up the stack

// Coalesce documents and windows

// Combinators

// Comma and first run

// Comment:

// Compile and execute a filtering function if one is not provided

// Complete

// Computed height then comes back as 0.

// Condense equivalence converters

// Console exists when dev tools are open, which can happen at any time

// Contents

// Context for global events is callbackContext if it is a DOM node or jQuery collection

// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:

// Convert "+=" or "-=" to relative numbers (#7345)

// Convert "normal" to computed value

// Convert String-formatted options into Object-formatted ones

// Convert anything to text

// Convert dashed to camelCase; used by the css and data modules

// Convert data if not already a string

// Convert html into DOM nodes

// Convert no matter what (that way responseXXX fields are always set)

// Convert non-html into a text node

// Convert options from String-formatted to Object-formatted if needed

// Convert response if prev dataType is non-auto and differs from current

// Convert to each sequential dataType

// Convert to pixels if value adjustment is needed

// Copy the events from the original to the clone

// Copy the properties one-by-one to the cache object

// Copyright (c) 2005-2008 spinelz.org (http://script.spinelz.org/)

// Copyright (c) 2013 Keith Perhac @ DelfiNet (http://delfi-net.com)

// Counter for holding the number of active queries

// Create a new module (and put it into the cache)

// Create a timestamp if incoming event doesn't have one

// Create converters map with lowercased keys

// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods

// Create mouseenter/leave events using mouseover/out and event-time checks

// Create scrollLeft and scrollTop methods

// Create target properties

// Create the abort callback

// Create the final options object

// Creates a full fledged settings object into target

// Cross domain only allowed if supported through XMLHttpRequest

// Cross-browser xml parsing

// DEPRECATED: alias for componentInstance for backwards compat.

// DOM props

// Data converters

// Deactivate deps tracking while processing error handler to avoid possible infinite rendering.

// Deep watchers and watchers on Object/Arrays should fire even

// Default abort message

// Default jsonp settings

// Default process is resolve

// Default speed

// Default value for a checkbox should be "on"

// Defend against cloned attroperties (jQuery gh-1709)

// Deferred helper

// Deferred#then to conditionally suppress rejection.

// Deferreds

// Define a local copy of jQuery

// Define the hook, we'll check on the first run if it's really needed.

// Defining this global in .eslintrc.json would create a danger of using the global

// Delegate to script

// Deprecated

// Dereference transport for early garbage collection

// Descend through wrappers to the right content

// Deserialize a standard representation

// Detach an event or set of events from an element

// Detached nodes confoundingly follow *each other*

// Detect misreporting of content dimensions for box-sizing:border-box elements

// Detect obvious negatives

// Detect overflow:scroll screwiness (gh-3699)

// Detect show/hide animations

// Detect silently failing push.apply

// Detect whether an element with the move class applied has

// Detect, normalize options and install callbacks for jsonp requests

// Determine event propagation path in advance, per W3C events spec (#9951)

// Determine handlers

// Determine if request has content

// Determine if successful

// Determine new display value for elements that need to change

// Determine the position of an element within the set

// Determine what event timestamp the browser is using. Annoyingly, the

// Disable .fire

// Disable .fire and .add

// Discard index placeholder values to get only actual matches

// Discard the second event of a jQuery.event.trigger() and

// Disconnected elements can have computed display: none, so first confirm that elem is

// Disconnected nodes

// Do a sibling check if the nodes have a common ancestor

// Do not include comment or processing instruction nodes

// Do not traverse comment nodes

// Do send the request (this may raise an exception)

// Do the same for pointerenter/pointerleave and pointerover/pointerout

// Doctype:

// Document context

// Document order sorting

// Don't automatically add "px" to these possibly-unitless properties

// Don't check non-elements (#13208)

// Don't conflict with Object.prototype properties (#13203)

// Don't consume trailing commas as valid

// Don't do default actions on window, that's where global variables be (#6170)

// Don't do events on text and comment nodes

// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)

// Don't get fooled by Object.prototype properties (jQuery #13807)

// Don't get tricked when zoom affects offsetWidth (gh-4029)

// Don't get/set attributes on text, comment and attribute nodes

// Don't get/set properties on text, comment and attribute nodes

// Don't install if already installed, or SSR

// Don't keep the element (issue #299)

// Don't match elem in the :animated selector

// Don't pass non-elements to Sizzle

// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)

// Don't re-trigger an onFOO event when we call its FOO() method

// Don't return options that are disabled or in a disabled optgroup

// Don't set styles on text and comment nodes

// During updates, a kept-alive component's child components may

// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF

// EXTERNAL MODULE: ./assets/scripts/components/IntersectionObserver.js

// EXTERNAL MODULE: ./assets/scripts/lib/lazy.js

// EXTERNAL MODULE: ./node_modules/jquery/dist/jquery.js

// EXTERNAL MODULE: ./node_modules/slick-carousel/slick/slick.js

// Early iOS 10 versions support `attachShadow` but not `getRootNode`,

// Easily-parseable/retrievable ID or TAG or CLASS selectors

// Easy API for creating new setFilters

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1

// Element contains another

// Element context

// Element/input types

// Empty animations, or finishing resolves immediately

// Empty the queue first

// Enable finishing flag on private data

// End tag:

// Enforce case-sensitivity of name attribute

// Enforce single-firing

// Ensure a hooks for this queue

// Ensure proper type for the source value

// Ensure that invalid selectors throw exceptions at attach time

// Ensure the complete handler is called before this completes

// Ensure the created nodes are orphaned (#12392)

// Ensure the presence of an event listener that handles manually-triggered

// Ensuring the div is display: block

// Evaluate against documentElement in case elem is a non-element node (e.g., document)

// Evaluate and update our best guess (doubling guesses that zero out).

// Evaluate executable scripts on first document insertion

// Evaluate text as a json expression

// Evaluates a script in a provided context; falls back to the global one

// Event object

// Events

// Events bubbling up the document may have been marked as prevented

// Exclude scripts to avoid IE 'Permission Denied' errors

// Execute a callback for every element in the matched set.

// Execute callbacks for all pending executions,

// Execute immediately if ready is not present

// Execute the appropriate callbacks

// Execute the module function

// Executing both pixelPosition & boxSizingReliable tests require only one layout

// Exit early if all IntersectionObserver and IntersectionObserverEntry

// Exit early if the nodes are identical

// Exit early if we're not running in a browser.

// Expand context for sibling selectors

// Exports

// Expose jQuery and $ identifiers, even in AMD

// Expose support vars for convenience

// Exposes the constructors globally.

// Extend jQuery itself if only one argument is passed

// Extend the base object

// Extend with the prototype to reset the above stopImmediatePropagation()

// Extending ajaxSettings

// Extract dataTypes list

// Extract error from statusText and normalize for non-aborts

// Extracted from jQuery v1.11 source

// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)

// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"

// Fails to persist the checked state of a cloned checkbox or radio button.

// Fake xhr

// Fall back on getElementsByName

// Fall back to offsetWidth/offsetHeight when value is "auto"

// Fallback to prop when attributes are not supported

// Fallback to setImmediate.

// Fetch a seed set for right-to-left matching

// File protocol always yields status code 0, assume 200

// File: protocol always yields status 0; see #8605, #14207

// Filter out possible comments

// Filters

// Find delegate handlers

// Find primary matches

// Find the closest opened tag of the same type

// Find the next relative operator (if any) for proper handling

// Finish early in limited (non-browser) environments

// Finish if the scale equals or crosses 1 (making the old*new product non-positive).

// Fire an inner synthetic event with the original arguments

// Fire callbacks

// Fire handlers on the event path

// Firefox doesn't alert if the returnValue field is not set.

// Firefox doesn't have focus(in | out) events

// Fix IE bugs, see support tests

// Fix IE cloning issues

// Fix https://github.com/vuejs/vue/pull/7730

// Fix name and attach hooks

// Fixes #9887

// Fixes bug #9237

// Flag for duplicate removal

// Flag the module as loaded

// Flag to know if list is currently firing

// Flag to know if list was already fired

// Flag to prevent firing

// Flatten any nested arrays

// For "border" or "margin", add border

// For "content" or "padding", subtract border

// For "content", subtract padding

// For CommonJS and CommonJS-like environments where a proper `window`

// For Promises/A+, convert exceptions into rejections

// For XHR2 non-text, let the caller handle it (gh-2498)

// For a node to qualify as a static root, it should have children that

// For cross-browser consistency, suppress native .click() on links

// For cross-domain requests, seeing as conditions for a preflight are

// For each dataType in the dataTypeExpression

// For environments that do not have a `window` with a `document`

// For internal use only.

// For mouseenter/leave call the handler if related is outside the target.

// For mutual compressibility with _default, replace `this` access with a local var.

// For old IE

// For options that shouldn't be deep extended:

// For plain HTML markup, normalization can be completely skipped because the

// For props and computed properties, we define the proxy getters on

// For same-domain requests, won't change header if already provided.

// For use in libraries implementing .is()

// For values outside the Basic Multilingual Plane (BMP), manually construct a

// Force browsers to behave consistently when non-matching value is set

// Force callback invocation

// Force json dataType

// Force options to be an object

// Force setup before trigger

// Force setup before triggering a click

// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>

// Forget the data if we're done with it

// Gecko does not error, returns false instead

// General show/hide setup for this element animation

// Generate a function of recursive functions that can be used to check each element

// Generate parameters to create a standard animation

// Generate shortcuts for custom animations

// Get a promise for this deferred

// Get a promise resolved when queues of a certain type

// Get and set the style property on a DOM Node

// Get callback name, remembering preexisting value associated with it

// Get document width or height

// Get document-relative position by adding viewport scroll to viewport-relative gBCR

// Get initial elements from seed or context

// Get nonempty value(s) by temporarily forcing visibility

// Get response data

// Get the Nth element in the matched element set OR

// Get the final matcherOut by condensing this intermediate into postFinder contexts

// Get the specific value for the option

// Get the whole matched element set as a clean array

// Get the window object again. When a friendly iframe is destroyed, it

// Get transport

// Get width or height on the element, requesting but not forcing parseFloat

// Gets

// Gets all values

// Gets hook for the prefixed version, then unprefixed version

// Give the init function the jQuery prototype for later instantiation

// Go through every key on the object,

// Go through the array, only saving the items

// Go through the array, translating each of the items to their new values

// Go to the end state if fx are off

// Grab necessary hook if one is defined

// Guard against undefined "subtract", e.g., when used as in cssHooks

// HANDLE: $(""), $(null), $(undefined), $(false)

// HANDLE: $(#id)

// HANDLE: $(DOMElement)

// HANDLE: $(expr, $(...))

// HANDLE: $(html) -> $(array)

// HANDLE: $(html, props)

// HTML5 custom data-* attrs

// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)

// Handle HTML strings

// Handle a deep copy situation

// Handle a returned thenable

// Handle cache's special case and crossDomain

// Handle case when target is a string or something (possible in deep copy)

// Handle event binding

// Handle falsy url in the settings object (#10093: consistency with old signature)

// Handle firing indexes

// Handle iff the expected data type is "jsonp" or we have a parameter to set

// Handle it asynchronously to allow scripts the opportunity to delay ready

// Handle most common string cases

// Handle multiple events separated by a space

// Handle state

// Handle the global AJAX counter

// Handle when the DOM is ready

// Handle: [ owner, key, value ] args

// Handle: [ owner, { properties } ] args

// Handle: regular nodes (via `this.ownerDocument`), window

// Handles shorthand.

// Headers (they are sent all at once)

// Height set through cssText does not get applied.

// Here we have async deferring wrappers using microtasks.

// Here we just export a default compiler using the default parts.

// Hook needed; redefine it so that the support test is not executed again.

// Hook not needed (or it's not possible to use it due

// Hooks for boolean attributes

// However, it has subtle problems when state is changed right before repaint

// However, it is not slated for removal any time soon

// ID filter and find

// ID selector

// IE 11/Edge don't find elements on a `[name='']` query in some cases.

// IE 9's matchesSelector returns false on disconnected nodes

// IE <=9 replaces <option> tags with their contents when inserted outside of

// IE doesn't support innerHTML for SVG elements

// IE input[type=range] only supports `change` event

// IE returns zIndex value as an integer.

// IE textarea placeholder bug

// IE throws exception on accessing the href property if url is malformed,

// IE throws on elements created in popups

// IE throws on parseFromString with invalid input.

// IE's :disabled selector does not pick up the children of disabled fieldsets

// IE/Edge & older browsers don't support the :scope pseudo-class.

// IE/Edge misreport `getComputedStyle` of table rows with width/height

// IE/Edge sometimes throw a "Permission denied" error when strict-comparing

// IE8 throws error here and will not see later tests

// IE8-9 doesn't update selected after form reset (#2551)

// IE9 has no XHR2 but throws on binary (trac-11426)

// Identify a display type, preferring old show/hide data over the CSS cascade

// If "type" variable is undefined, then "GET" method will be used.

// If a hook was provided get the computed value from there

// If a hook was provided get the non-computed value from there

// If a hook was provided, use that value, otherwise just set the specified value

// If a normal DOM Ready event fired, decrement, and wait if need be

// If a number was passed in, add the unit (except for certain CSS properties)

// If a poll interval is set, use polling instead of listening to

// If a selector was specified, locate the right elements in a dummy div

// If an array was passed in, assume that it is an array of form elements.

// If comma is not replaced with a dot, the input will be rounded down (i.e. acting

// If conv2 outputs current

// If curCSS returns percentage, fallback to offset

// If data is available and should be processed, append data to url

// If either of the above conditionals set a new parentRect,

// If event changes its type, use the special event handlers for the changed type

// If it is a node unlikely to be stringify-ed or looped over

// If it receives a jQuery object, the first element is used

// If it's a function

// If key is an array of keys...

// If no argument is given, return whether or not list has callbacks attached.

// If no nodeType, this is expected to be an array

// If no tag name is provided, clean shop

// If no transport, we auto-abort

// If nobody prevented the default action, do it now

// If none found, seek a pair

// If not, create one

// If nothing was found internally, try to fetch any

// If obj is provided, the promise aspect is added to the object

// If prev can be converted to accepted input

// If previous value didn't exist - remove it

// If request was aborted inside a prefilter, stop there

// If request was aborted inside ajaxSend, stop there

// If second argument (value) is a function it's a converter...

// If seed is empty or no tokens remain, we can return early

// If selector defined, determine special event api type, otherwise given type

// If set returns undefined, fall back to normal setting

// If successful, handle type chaining

// If target is a link, prevent default action.

// If target is not the <li> element (ie: a child), find the <li>.

// If target is omitted, writes into ajaxSettings.

// If the element has a class name or if we're passed `false`,

// If the element has a non-visible overflow, and it's not the <body>

// If the element isn't displayed, an intersection can't happen.

// If the event is namespaced, then each handler is only invoked if it is

// If the fx queue is dequeued, always remove the progress sentinel

// If the new entry intersection ratio has crossed any of the

// If the nodes are siblings, we can do a quick check

// If the parent has element that is assigned through shadow root slot

// If the parent isn't displayed, an intersection can't happen.

// If the preceding token was a descendant combinator, insert an implicit any-element `*`

// If the root is not in the DOM or target is not contained within

// If the selector is sufficiently simple, try using a "get*By*" DOM method

// If there are functions bound, to execute

// If there is an error parsing the URL, assume it is crossDomain,

// If there's more to do, yield

// If this is a native event triggered above, everything is now in order

// If this is a positional/relative selector, check membership in the returned set

// If this is an inner synthetic event for an event with a bubbling surrogate

// If this was an empty animation, synthesize a final progress notification

// If traditional, encode the "old" way (the way 1.3.2 or older

// If url is an object, simulate pre-1.5 signature

// If value is a function, invoke it and use its return value

// If we are going to the end, we want to run all the tweens

// If we can't decode the cookie, ignore it, it's unusable.

// If we can't parse the cookie, ignore it, it's unusable.

// If we found a dataType

// If we get here with a content-box, we're seeking "padding" or "border" or "margin"

// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,

// If we have elements to modify, make the request

// If we have memory from a past run, we should fire after adding

// If we include width, step value is 1 to do all cssExpand values,

// Ignore Windows 7 IE11 "Unspecified error"

// Ignore double-resolution attempts

// Ignore post-resolution exceptions

// Ignore repeat invocations

// Ignore the error.

// Ignore unchanged ratios

// Implement show/hide animations

// Implement the identical functionality for filter and not

// In 2.5 we used (macro) tasks (in combination with microtasks).

// In CSS3, :checked should return both checked and selected elements

// In Chrome, if an element having a focusout handler is blurred by

// In IE/Edge using regex groups here causes severe slowdowns.

// In Safari 8 documents created via document.implementation.createHTMLDocument

// In cases where either:

// In our bodyBackground.html iframe,

// In problematic UIWebViews, Promise.then doesn't completely break, but

// In some browsers, typeof returns "function" for HTML <object> elements

// In such cases, we work around the behavior by prefixing every selector in the

// In those cases, the computed value can be trusted to be border-box.

// In-page `selector#id sibling-combinator selector` fails

// Includes all common event props including KeyEvent and MouseEvent specific props

// Incorporate borders into its offset, since they are outside its content origin

// Incorporate the offset, then check against cycle size

// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that

// Index in selector

// Index of currently firing callback (modified by add/remove as needed)

// Init the element's event structure and main handler, if this is the first

// Init the event handler queue if we're the first

// Initialize a jQuery object

// Initialize against the default document

// Initialize central reference

// Inject install function into component - allows component

// Inject the element directly into the jQuery object

// Inline style trumps all

// Insert callback into url or form data

// Inspect recursively

// Install callback

// Install callbacks on deferreds

// Install script dataType

// Instance methods

// Instance-specific data

// Intentionally let the error be thrown if parseHTML is not present

// Interestingly, IE 10 & older don't seem to have the issue.

// Interestingly, in some cases IE 9 doesn't suffer from this issue.

// Interrupt processing of the outer synthetic .trigger()ed event

// Is the DOM ready to be used? Set to true once it occurs.

// Item is non-scalar (array or object), encode its numeric index.

// Iteratively approximate from a nonzero starting point

// JSDOM may return undefined for transition properties

// Jump to end and forget the data so .add doesn't re-fire

// Keep an empty list if we have data for future add calls

// Keep pipe for back-compat

// Keep references to cloned scripts for later restoration

// Keep track of which events have ever been used, for event optimization

// Keys separate source (or catchall "*") and destination types with a single space

// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable

// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION

// Last fire value for non-forgettable lists

// Last-Modified header cache for next request

// Lazy-add the new callbacks in a way that preserves old ones

// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter

// Lengthen the array for every element, matched or not

// Leverage slice if possible

// Listen to events

// Local document vars

// Look for any active animations, and finish them

// Look for any animations in the old queue and finish them

// Loop through all the selected options

// Loop variable

// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND

// Main method

// Make a writable jQuery.Event from the native event object

// Make numeric if forced or a qualifier was provided and val looks numeric

// Make sure modifiers like prevent and stop get executed after key filtering

// Make sure textarea (and checkbox) defaultValue is properly cloned

// Make sure that null and NaN values aren't set (#7116)

// Make sure that re-using the options doesn't screw things around

// Make sure that the handler has a unique ID, used to find/remove it later

// Make sure that we're working with the right name

// Make sure that we're working with the right name. We don't

// Make sure the element is visible & connected

// Make sure we set the data so it isn't changed later

// Make sure we trim BOM and NBSP

// Make sure we update the tween properties later on

// Make sure we're not in a plaintext content element like script/style

// Make the changes, replacing each non-ignored context element with the new content

// Make the deferred a promise

// Make this explicit, since user can override this through ajaxSetup (#11264)

// Make value of this field explicit since

// Map over jQuery in case of overwrite

// Map over the $ in case of overwrite

// Map tuples (progress, done, fail) to arguments (done, fail, progress)

// Margin is only for outerHeight, outerWidth

// Mark it as fixed

// Mark scripts as having already been evaluated

// Match elements found at the specified indexes

// Match elements unmatched by `matcher`

// Match html or make sure no context is specified for #id

// Matches dashed string for camelizing

// Method init() accepts an alternate rootjQuery

// Methods guaranteed to produce a unique set when starting from a unique set

// Microsoft forgot to hump their vendor prefix (#9572)

// Minimal polyfill for Edge 15's lack of `isIntersecting`

// Miscellaneous

// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add

// Module

// More options handling for requests with no content

// Move matched elements from seed to results to keep them synchronized

// Move the given value to match[3] whether quoted or unquoted

// Multi-Selects return an array

// Multifunctional method to get and set values of a collection

// Multiple arguments are aggregated like Promise.all array elements

// Must access selectedIndex to make default options select

// Must not alter options, thus extending a fresh object...

// MutationObserver has wider support, however it is seriously bugged in

// NB: No relatedTarget if the mouse left/entered the browser window

// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE

// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`

// NOTE: these are not considered part of the public API - avoid relying on

// Namespaced trigger; create a regexp to match event type in handle()

// Native handler

// Need init if jQuery is called (just allow error to be thrown if not included)

// Need to be able to calculate position if either

// Never move original objects, clone them

// New element

// No argument, return index in parent

// Normalize "" and auto

// Normalize opt.queue - true/undefined/null -> "fx"

// Not public - generate a queueHooks object, or return the current one

// Not quite $.extend, this won't overwrite existing keys.

// Note: <body> and <html> cannot be clipped to a rect that's not also

// Note: style is excluded because it relies on initial clone for future

// Note: this is a browser-only function so we can assume elms are DOM nodes.

// Nothing should be selected when empty strings follow ^= or $= or *=

// Nullify the div so it wouldn't be stored in the memory and

// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION

// OR when it is inside another scoped slot or v-for (the reactivity may be

// Objects with no prototype (e.g., `Object.create( null )`) are plain

// Objects with prototype are plain iff they were constructed by a global Object function

// Old Firefox doesn't throw on a badly-escaped identifier.

// Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers

// Older IE

// Older IE sometimes signals "interactive" too soon

// Older WebKit doesn't clone checked state correctly in fragments

// On a manual native abort, IE9 throws

// On the other hand, just using `getAttribute` is not enough as

// Once for each type.namespace in types; type may be omitted

// One-time assignments

// Only Firefox includes border widths

// Only add window if we got to document (e.g., not plain obj or detached DOM)

// Only assign if different to avoid unneeded rendering.

// Only attach events to objects that accept data

// Only certain elements can match :enabled or :disabled

// Only convert to a number if it doesn't change the string

// Only deal with non-null/undefined values

// Only evaluate the response if it is successful (gh-4126)

// Only keep the most recent entries

// Only merged options has the _base property.

// Only normal processors (resolve) catch and reject exceptions

// Only read styles.position if the test has a chance to fail

// Only substitute handlers pass on context

// Only use addEventListener if the special events handler returns false

// Opera 10-11 does not throw on post-comma invalid pseudos

// Operate on a copy of prop so per-property easing won't be lost

// Operator (capture 2)

// Optimize for push.apply( _, NodeList )

// Option elements defer to a parent optgroup if present

// Option to run scripts is true for back-compat

// Optional AJAX dependency, but won't run scripts if not present

// Or just use first one

// Other potentially-special ASCII characters get backslash-escaped

// Otherwise append directly

// Otherwise bring back whatever was previously saved (if anything),

// Otherwise just get the value from the style object

// Otherwise nodes in our document sort first

// Otherwise use the full result

// Otherwise we know they are disconnected

// Otherwise we need full lists of their ancestors for comparison

// Otherwise, check computed style

// Otherwise, if a way to get the computed value exists, use that

// Otherwise, throw an error or return tokens

// Override manipulation of globals by nested matchers

// Override mime type if needed

// Overrides response content-type header

// Panic based approach to setting things on disconnected nodes

// Parentless nodes are either documents or disconnected

// Parse text as xml

// Pass this if window is not defined yet

// Passing an empty string as a 3rd parameter to .css will automatically

// Per-property setup

// Permission is hereby granted, free of charge, to any person obtaining

// PhantomJS and iOS 7.x

// Piggyback on a donor event to simulate a different one

// Plus for old WebKit, typeof returns "function" for HTML collections

// Populate the class2type map

// Position-in-collection

// Positional selectors never match, since there's no _selection_ context

// Potentially complex pseudos

// Precompiled matchers will still verify ancestry, so step up a level

// Prefer a tbody over its parent table for containing new rows

// Prefilter to get matcher input, preserving a map for seed-results synchronization

// Prefix every selector in the list

// Prefixed last, checked first

// Prepend if requested

// Preserve chaining for setter

// Preserve script evaluation history

// Pretend to be hidden if this is a "show" and

// Prevent Object.prototype pollution

// Prevent attribute/property "interpolation"

// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)

// Prevent memory leaks

// Prevent never-ending loop

// Prevent re-triggering of the same event, since we already bubbled it above

// Prevent storing a cookie that we couldn't decode.

// Prevent triggered image.load events from bubbling to window.load

// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)

// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters

// Private properties.

// Private state for monitoring.

// Process the value(s)

// Promise is available, we will use it:

// Propagate others as results

// Properties of context are called as methods if possible

// Provide `match` to avoid retokenization if we modified the selector above

// Provide the current computed size to request scroll gutter calculation (gh-3589)

// Public properties.

// Purposefully self-exclusive

// Put explicitly provided properties onto the event object

// Put hash and anti-cache on the URL that will be requested (gh-1732)

// Put in the new values to get a computed value out

// QSA and matchesSelector support

// Queue of execution data for repeatable lists

// Queue-skipping animations hijack the fx hooks

// Queueing

// Quick check to determine if target is callable, in the spec

// Radios and checkboxes getter/setter

// Raw string

// Re-resolve promises immediately to dodge false rejection from

// Read

// Record all 3 overflow attributes because IE does not infer the shorthand

// Recurse if we're merging plain objects or arrays

// Reduce context if the leading compound selector is an ID

// Reenable scripts

// Regex strategy adopted from Diego Perini

// Register the controller as a special universal handler for all event namespaces

// Regular expressions

// Reintegrate element matches to eliminate the need for sorting

// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857

// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787

// Remaining elements are neither :enabled nor :disabled

// Remember that setFilters inherits from pseudos

// Remember that the DOM is ready

// Remember the hash so we can put it back

// Remember the old values, and insert the new ones

// Remember the original values

// Remember the top-level container

// Remember what we're overwriting

// Remove *all* instances

// Remove a callback from the list

// Remove all callbacks from the list

// Remove any remaining nodes

// Remove auto dataType and get content-type in the process

// Remove boolean attributes when set to false

// Remove data and the expando if it's no longer used

// Remove duplicates

// Remove element nodes and prevent memory leaks

// Remove from its parent by default

// Remove generic event handler if we removed something and no more handlers exist

// Remove hash to simplify url manipulation

// Remove matching events

// Remove the expando if there's no more data

// Remove the open elements from the stack

// Remove wrapper from fragment

// Removing the function wrapper causes a "Permission Denied"

// Replace a hexadecimal escape sequence with the encoded Unicode code point

// Replace server-side written pluses with spaces.

// Replace/restore the type attribute of script elements for safe DOM manipulation

// Request state (becomes false upon send and true upon completion)

// Resolve the animation and report its conclusion

// Resolve when we played the last frame; otherwise, reject

// Response headers

// Restore matcherIn since elem is not yet a final match

// Restore the original display value at the end of pure show/hide animations

// Restrict "overflow" and "display" styles during box animations

// Rethrow post-completion exceptions

// Retrieve `then` only once

// Retrieving style before computed somehow

// Return a confounding non-pixel value or feign ignorance, as appropriate.

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property

// Return a vendor-prefixed property or undefined

// Return all the elements in a clean array

// Return early from calls with invalid selector or context

// Return early if doc is invalid or already selected

// Return false to allow normal processing in the caller

// Return jQuery for attributes-only inclusion

// Return just the one element from the set

// Return non-false to allow normal event-path propagation

// Return special upon seeing a positional matcher

// Return the cloned set

// Return the exports of the module

// Return the length of the invalid excess

// Return the modified object

// Return the newly-formed element set

// Return the resulting serialization

// Return true if an entry matches a threshold or if the new ratio

// Return zeros for disconnected and hidden (display: none) elements (gh-2310)

// Reuse newcache so results back-propagate to previous elements

// Reuse variable

// Reusing 'index' because we have the correct "name"

// Reverse direction for :only-* (if we haven't yet done so)

// Reverse order for parents* and prev-derivatives

// Revert the changed values

// Revert the old values

// Round the intersection ratio to avoid floating point math issues:

// Run callback and check for early termination

// Run delegates first; they may want to stop propagation beneath us

// Run the timer and safely remove it when done (allowing for external removal)

// Running getBoundingClientRect on a

// Safari 4 - 5 only, Opera <=11.6 - 12.x only

// Safari 6.0 supports :scope but it's an alias of :root there.

// Safari < 10.2 & UIWebView doesn't fire compositionend when

// Safari sends mouseenter too often; see:

// Save back as free

// Save response for use in complete callback

// Save selector and tokenization

// Save the URL in case we're toying with the If-Modified-Since

// Save the callback name for future use

// Saved data should be false in such cases, but might be a leftover capture object

// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display

// See https://bugs.jquery.com/ticket/13378

// See https://connect.microsoft.com/IE/feedback/details/1736512/

// See https://github.com/jquery/sizzle/pull/225

// See https://github.com/whatwg/html/issues/2369

// See https://html.spec.whatwg.org/#nonce-attributes

// See if we can take a shortcut and just use innerHTML

// See setDocument()

// See ticket #14549 for more info.

// See: https://github.com/vuejs/vuex/issues/1505

// See: https://github.com/w3c/IntersectionObserver/issues/211

// Seedless set matches succeeding multiple successful matchers stipulate sorting

// Seek `elem` from a previously-cached index

// Seek a direct converter

// Select is set to empty string on purpose

// Send global event

// Serialize an array of form elements or a set of

// Serialize array item.

// Serialize object item.

// Serialize scalar item.

// Serialize the form elements

// Set data for the fake xhr object

// Set document vars if needed

// Set headers

// Set position first, in-case top/left are set even on static elem

// Set readyState

// Set the Accepts header for the server, depending on the dataType

// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.

// Set the base href for the created document

// Set the correct header, if data is being sent

// Set the data...

// Set the display of the elements in a second loop to avoid constant reflow

// Set the guid of unique handler to the same of original handler, so it can be removed

// Set them one by one, and the browser will only set those it can recognize

// Set width or height on the element

// Sets intersection ratio.

// Sets many values

// Sets multiple values

// Sets one value

// Shift arguments if data argument was omitted

// Shortcut for :nth-*(n)

// Shortcut simple #id case for speed

// Should return 1, but returns 4 (following)

// Show any hidden elements after setting opacity to 0

// Show elements before animating them

// Simple values such as "10px" are parsed to Float;

// Simulated bind

// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in

// Since we force visibility upon cascade-hidden elements, an immediate (and slow)

// Single element

// Single tag

// Single- and empty arguments are adopted like Promise.resolve

// Skip elements already in the context collection (trac-4087)

// Skip the boolean and the target

// So expect focus to be synchronous when the element is already active,

// So we now use microtasks everywhere, again.

// So, we allow :focus to pass through QSA all the time to avoid the IE error

// Some browsers don't support the "nonce" property on scripts.

// Some elements (templates) need to behave differently inside of a v-pre

// Some styles come back with percentage values, even though they shouldn't

// Sort on method existence if only one input has compareDocumentPosition

// Sort queue before flush.

// Sort stability

// Special case to return head of iframe instead of iframe itself

// Special processors (notify) just wait for resolution

// Speed up dequeue by getting out quickly if this is just a lookup

// Start tag:

// Start the next in the queue if the last step wasn't forced.

// Start with computed style

// Starting value computation is required for potential unit mismatches

// Status-dependent callbacks

// Stop scripts or inline event handlers from being executed immediately

// Store arguments for use when handling the inner native event

// Store className if set

// Store hidden/visible for toggle so `.stop().toggle()` "reverses"

// Strict HTML recognition (#11290: must start with <)

// Strict HTML recognition (must start with <)

// Strict mode functions invoked without .call/.apply get global-object context

// Strip and collapse whitespace

// Strip and collapse whitespace according to HTML spec

// Style of cloned element affects source element cloned (#8908)

// Subtract parent offsets and element margins

// Success/Error

// Support array or space separated string of keys

// Support values array created by autoprefixer, e.g.

// Support: Android 4.0 - 4.3 only

// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44

// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3

// Support: Android 4.0 only

// Support: Android 8 Chrome 86+

// Support: Android <=2.3 only

// Support: Android <=2.3 only (functionish RegExp)

// Support: Android <=4.0 only

// Support: Android <=4.0 only, PhantomJS 1 only

// Support: Android <=4.1 - 4.3 only

// Support: Android <=4.1 only

// Support: Android <=4.3 only

// Support: Android<4.0

// Support: Chrome 14-35+

// Support: Chrome 86+

// Support: Chrome <=35 - 45

// Support: Chrome <=35 - 45+

// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1

// Support: Chrome <=57, Firefox <=52

// Support: Chrome <=64

// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+

// Support: Firefox 20+

// Support: Firefox 51+

// Support: Firefox 64+, Edge 18+

// Support: Firefox 70+

// Support: Firefox <=3.6 - 5 only

// Support: Firefox <=42

// Support: Firefox <=43 - 45

// Support: Firefox <=44

// Support: Firefox <=54

// Support: IE 10 - 11+, Edge 15 - 18+

// Support: IE 11 only

// Support: IE 11+

// Support: IE 11+, Edge 15 - 18+

// Support: IE 11+, Edge 17 - 18+

// Support: IE 11, Edge

// Support: IE 6 - 7 only

// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,

// Support: IE 8 - 9 only

// Support: IE 9 - 11 only

// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only

// Support: IE 9 - 11+, Edge 12 - 18+

// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only

// Support: IE 9 - 11+, Edge 15 - 18+

// Support: IE 9 only

// Support: IE <9 only

// Support: IE <=10 - 11 only

// Support: IE <=10 - 11, Edge 12 - 13 only

// Support: IE <=11 only

// Support: IE <=11 only, Firefox <=30 (#15098, #14150)

// Support: IE <=11+

// Support: IE <=8

// Support: IE <=8 - 11 only

// Support: IE <=8 - 11, Edge 12 - 15

// Support: IE <=9

// Support: IE <=9 - 10 only

// Support: IE <=9 - 11 only

// Support: IE <=9 - 11+

// Support: IE <=9 - 11, Edge 12 - 15

// Support: IE <=9 only

// Support: IE, Opera, Webkit

// Support: IE8

// Support: IE8, Opera 11-12.16

// Support: IE9-11+

// Support: IE<10

// Support: IE<8

// Support: IE<9

// Support: IE<9, Safari

// Support: Opera 10 - 11 only

// Support: Promises/A+ section 2.3.1

// Support: Promises/A+ section 2.3.3.3.1

// Support: Promises/A+ section 2.3.3.3.3

// Support: Promises/A+ section 2.3.3.3.4.1

// Support: Promises/A+ sections 2.3.3.1, 3.5

// Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5

// Support: Safari 6.0 only

// Support: Safari 7 only

// Support: Safari 8 only

// Support: Safari 8+, iOS 8+

// Support: Safari <=6 - 7 only

// Support: Safari <=7 - 9.1, Chrome <=37 - 49

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)

// Support: Windows 8 Native Apps

// Support: Windows Web Apps (WWA)

// Support: iOS 10.0-10.2 only

// Support: real iOS 8.2 only (not reproducible in simulator)

// Suppress native focus or blur as it's already being fired

// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)

// Swappable if display is none or starts with table

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,

// TODO: Now that all calls to _data and _removeData have been replaced

// TODO: identify versions

// TODO: this can be further optimized by properly analyzing in-scope bindings

// Tag

// Take advantage of querySelectorAll

// Take an array of elements and push it onto the stack

// Take the "read" path and allow the get method to determine

// Target is in this context.

// Target is nested in this context.

// Target should not be a text node (#504, #13143)

// Technically it leverages the (macro) task queue,

// Test for IE <= 9 as proposed by Browserhacks

// Tests for existence of standard globals is to allow style-loader

// Text node

// Text to html (true = no transformation)

// Thanks to Andrew Dupont for this technique.

// The `node.getAttribute` check was added for the sake of

// The above copyright notice and this permission notice shall be

// The attrs elements can be null (#14894)

// The broken getElementById methods don't pick up programmatically-set names,

// The calling jQuery object (element matches) is not empty

// The current target watcher being evaluated.

// The current version of jQuery being used

// The default length of a jQuery object is 0

// The deferred used on DOM ready

// The elements to wrap the target around

// The final step of a "hide" animation is actually hiding the element

// The foundational matcher ensures that elements are reachable from top-level context(s)

// The getter ensures a default option is selected

// The identifier C does not have to be a valid language name."

// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append

// The jQuery object is actually just the init constructor 'enhanced'

// The key will always be camelCased in Data

// The matching of C against the element's language value is performed case-insensitively.

// The module cache

// The nextTick behavior leverages the microtask queue, which can be accessed

// The ready event handler and self cleanup method

// The require function

// The technique has to be used as well when a leading combinator is used

// The template compiler attempts to minimize the need for normalization by

// The test attribute must be unknown in Opera but "safe" for WinRT

// The type and name attributes are restricted during .innerHTML assignment

// The url can be an options object (which then must have .url)

// The user may use createPseudo to indicate that

// The value/s can optionally be executed if it's a function

// There *must* be a type, no attaching namespace-only handlers

// There will always be at least one argument (an event object), so this array

// There's no need to maintain a stack because all render fns are called

// There's only work to do if current dataType is non-auto

// These helpers produce better VM code in JS engines due to their

// These hooks are used by animate to expand properties

// These usually indicate a programmer mistake during development,

// They will have gone through all possible matchers

// This  #4521 by skipping the unnecessary `checked` update.

// This "if" is needed for plain objects

// This accentuates the need for the creation of a real `window`.

// This corresponds to the behavior of CSS absolute positioning

// This ensures that:

// This entry need to be wrapped in an IIFE because it need to be in strict mode.

// This expression is here for better compressibility (see addClass)

// This happens for inline elements with no explicit setting (gh-3571)

// This is a quoted cookie as according to RFC2068, unescape...

// This is a singleton, we need to execute it only once

// This is against the CSSOM draft spec:

// This is globally unique because only one watcher

// This is to test IE's treatment of not explicitly

// This logic, however, is not guaranteed and can change at any point in the future

// This method will return documentElement in the following cases:

// This should fail with an exception

// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the

// This transport only deals with cross domain or forced-by-attrs requests

// This vnode was used in a previous render!

// This was originally intended to fix #4521 but no longer necessary

// This will throw an exception if access to iframe is blocked

// Timeout

// Timers currently will call their complete callbacks, which

// To know if global events are to be dispatched

// To know if the callbacks have already been called at least once

// To make comparing easier, an entry that has a ratio of 0

// To prevent the for loop in the first place assign an empty array

// Toggle individual class names

// Toggle whole class name

// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id

// Track unmatched elements for set filters

// Traverse its children

// Treat each array item as a scalar.

// Treat null/undefined as ""; convert numbers to string

// Treat the template element as a regular one in browsers that

// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)

// Trigger the native event and capture its result

// Trim the selector passed to compile

// Trust units reported by jQuery.css

// Try convertible dataTypes

// Try prefixed name followed by the unprefixed name

// Try to minimize operations if there is only one selector in the list and no seed

// Try to shortcut find operations (as opposed to filters) in HTML documents

// Turn off finishing flag

// Type selector

// Types can be a map of types/handlers

// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER

// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It

// URL without anti-cache param

// Un-match failing elements by moving them back to matcherIn

// Unbind all events (on this namespace, if provided) for the element

// Unique for each copy of jQuery on the page

// Unless errors are allowed to bubble, catch and return them

// Unless we *know* we can detect duplicates, assume their presence

// Unsubscribe.

// Update global variables

// Update special based on newly reset type

// Uppercase the type

// Url cleanup var

// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)

// Use .is( ":disabled" ) so that fieldset[disabled] works

// Use .style if available and use plain properties where available.

// Use <html>/<body> instead of window since scroll bars affect size.

// Use IE sourceIndex if available on both nodes

// Use MutationObserver where native Promise is not available,

// Use a noop converter for missing script but not if jsonp

// Use a property on the element directly when it is not a DOM element,

// Use a stripped-down indexOf as it's faster than native

// Use cssHook if its there.

// Use data converter to retrieve json after script execution

// Use defaultValue in place of getAttribute("value")

// Use getAttributeNode to fetch booleans when getAttribute lies

// Use integer dirruns iff this is the outermost matcher

// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)

// Use native DOM manipulation to avoid our domManip AJAX trickery

// Use offsetWidth/offsetHeight for when box sizing is unreliable.

// Use onreadystatechange to replace onabort

// Use previously-cached element index if available

// Use proper attribute retrieval(#12072)

// Use same guid so caller can remove using origFn

// Use step hook for back compat.

// Use textContent for elements

// Use the fix-ed jQuery.Event rather than the (read-only) native event

// Use the handy event callback

// Use the original fragment for the last item

// Use the same loop as above to seek `elem` from the start

// Use toString instead of jQuery.type to catch host objects

// Use typeof to avoid zero-argument method invocation on host objects (#15151)

// Used by camelCase as callback to replace()

// Used for iframes

// Used only for `focus(in | out)` events

// Utilize native event if possible so blur/focus sequence is correct

// Utilize native event to ensure correct state for checkable inputs

// Verify that getAttribute really returns attributes and not properties

// Verify the id attribute

// Vnode moved left

// Vnode moved right

// Vue.extend constructor export interop.

// Vue.prototype.__patch__ is injected in entry points

// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// Walk down the tree looking for a discrepancy

// Watch for a new set of requests

// We add the dataType to the list if needed

// We allow this because of a bug in IE8/9 that throws an error

// We also use the url parameter if available

// We always set camelCase keys, so remove that.

// We always store the camelCased key

// We assume that it's the callback

// We can accept data for non-element nodes in modern browsers,

// We can fire global events as of now if asked to

// We can use :scope instead of the ID hack if the browser

// We can't cloneNode fragments that contain checked, in WebKit

// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching

// We don't need an array for one selects

// We don't want to classify *any* DOM node as a function.

// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2

// We have to close these tags to support XHTML (#13200)

// We must always have either seed elements or outermost context

// We should always get a number back from opacity

// We tried really hard, but the data doesn't exist.

// We use this for POS matching in `select`

// We're done with this property

// Webkit & Blink performance suffers when deleting properties

// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084

// Webkit/Opera - :checked should return selected option elements

// When found, cache indexes on `parent` and break

// When the key is not a string, or both a key and value

// Where available, offsetWidth/offsetHeight approximate border box dimensions.

// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the

// Where there is no isDisabled, check manually

// Work with a copy of dataTypes in case we need to modify it for conversion

// Write

// X-Requested-With header

// XHTML parsers do not magically insert elements in the

// [

// ]

// _f: resolveFilter

// `

// `IntersectionObserver`, it's sufficient to simply mirror `left` and `top`

// `contentDocument` with a `null` prototype.

// `createCompilerCreator` allows creating compilers that use alternative

// `i` is now the count of elements visited above, and adding it to `matchedCount`

// `in` check used to prevent JIT error (gh-2145)

// `jQuery.globalEval` so that it can fake a nonce-containing node

// `name` and `type` must use .setAttribute for WWA (#14901)

// `value` is handled separately because the DOM value may be temporarily

// `value` parameter was not undefined. An empty jQuery object

// `|| data` is dead code meant only to preserve the variable through minification.

// a child.

// a copy of this software and associated documentation files (the

// a flag to avoid this being observed

// a reactivated keep-alive component doesn't insert itself

// a successful hydration.

// a uid

// a value is Function if its prototype is function even across different execution context

// abstract components do not keep anything

// action, add listener, callbacks,

// activeInstance in lifecycle state

// add a new record indicating removal.

// add a raw attr (use this in preTransforms)

// add the component's children to its default slot

// adding anything as a sibling to the root node is forbidden

// additional parameters

// after 2.5. Keeping it for backwards compat with generated code from < 2.4

// after calling the init hook, if the vnode is a child component

// after the browser event has already occurred.

// again. It's not ideal to involve module-specific logic in here but

// akin to a jigsaw puzzle, we simply never set it to be sure.

// all

// all other transition classes applied to ensure only the move class

// allow further extension/mixin/plugin usage

// allow root elements with v-if, v-else-if and v-else

// allow v-model="obj.val " (trailing whitespace)

// already a merged invoker

// already occurred before other listeners are invoked.

// already pending

// and CommonJS for browser emulators (#13566)

// and blur to be synchronous when the element is not already active.

// and is always a fresh object, so it's safe to merge into it

// and might be considered as more preferable results.

// and multiple values (non-spec behavior)

// and prevent memory leak

// and return the corresponding response

// and skip force updating ones that do not actually use scope variables.

// and the handler would only fire if the event passed to it was fired

// and the old ratio are on the opposite sides of a threshold.

// and we need to use the hi-res version for event listener timestamps as

// and when that is passed down this would cause an error

// and when you create one that shouldn't be

// and/or If-None-Match header later on

// apply post-transforms

// apply pre-transforms

// apply transition data to child

// are already rendered on the client or has no need for initialization

// are based on the document's URL (gh-2965)

// are emptied (fx is the type by default)

// are not just static text. Otherwise the cost of hoisting out will

// are specified, set or extend (existing objects) with either:

// arg is for internal usage only

// args order: tag, data, children, normalizationType, alwaysNormalize

// arguments are needed to create the filter function

// arguments.

// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common

// around the issue.

// array of events

// as a comment node but preserves all the raw information for the node.

// as a floor function) causing unexpected behaviors

// as such selectors are not recognized by querySelectorAll.

// as these will throw away existing DOM nodes and cause removal errors

// as we run existing watchers

// as xhr.onerror cannot be accessed

// assert node match

// assign to this to avoid being removed in tree-shaking

// associated DOM element for it.

// async component

// async edge case #6566: inner click event triggers patch, event handler

// at instantiation here.

// attached during that flush.

// attached to outer element during patch, and triggered again. This

// attached. However, calling performance.now() has a perf overhead especially

// attempt a parseFloat and fallback to a string if the parse fails.

// attributes

// attributes that should be using props for binding

// automatically dequeued

// avoid catch triggering multiple times when nested calls

// avoid recursion

// avoid resetting cursor position when value is the same

// avoids Object.defineProperty calls for each instance created.

// avoriaz seems to mock a non-extensible $scopedSlots object

// background-* props affect original clone's values

// bail for environments that have buggy event.timeStamp implementations

// based on the rendering backend used.

// basic support for MathML

// be processed after the whole patch process ended.

// because functional components already normalize their own children.

// becomes browsing-context connected.

// been updated.

// behavior of getting and setting a style property

// being emptied incorrectly in certain situations (#8070).

// being equal to the identifier C,

// bind the createElement fn to this instance

// binding to window is necessary to make hot reload work in IE in strict mode

// boolean has higher priority

// bubbling surrogate propagates *after* the non-bubbling base), but that seems

// but Flash expects a value of "true" when used on <embed> tag

// but does not actually intersect is given a value of -1

// but in some cases we have to bail-out of this optimization

// but it is still a better choice than setTimeout.

// but it must have a current display style that would benefit

// but only if it is a raw options object that isn't

// but that will not handle a native abort

// but those exceptions were never presented as a real life use-cases

// but we should not, see #8335.

// but width seems to be reliably pixels.

// by a handler lower down the tree; reflect the correct value.

// by default scoped slots are considered "stable", this allows child

// by using document.implementation

// cache constructor

// cache original method

// cache resolved

// cached call

// calculate new intersection data.

// call component updated and activated hooks

// call enter callback now

// call factory function for non-Function types

// call leave callback now

// call the last hook...

// calling $.cookie().

// camelCase, specialEasing and expand cssHook pass

// can be evaluated at a time.

// can have their private assets too.

// can we use __proto__?

// case, which will result in a "00" `matchedCount` that differs from `i` but is also

// cater for pre-defined getter/setters

// certain weird environments...

// change, so directly walking the tree here may call activated hooks

// check cache

// check capture modifier

// check compilation errors/tips

// check default value

// check if there are any late-modified/attached options (#4976)

// check if there are dynamic scopedSlots (hand-written or compiled but with

// check if this is server-rendered content and if we can perform

// check inline-template render functions

// check is required in this first loop unless we have a nonempty display value (either

// check local registration variations first

// check namespace.

// check pattern

// check platforms/web/util/attrs.js acceptValue

// check pre state

// checked="checked" or checked

// child component listeners instead of DOM listeners

// child component. it should have hydrated its own tree.

// clicking outside of it, it invokes the handler synchronously. If

// clone children array to avoid mutating original in case of cloning

// clone observed objects, as the user probably wants to mutate it

// clone reused vnode

// collapse sibling forms: the second one becomes a child of the first one.

// comments should still be allowed, but ignored

// compile

// compile-time directive that manipulates AST.

// compiled as a scoped slot, render fn users would expect it to be present

// compiled slot content. To avoid that, we generate a unique key based on

// completely stops working after triggering a few times... so, if native

// complex values such as "rotate(1rad)" are returned as-is.

// component also has set the placeholder vnode's elm.

// component constructor creation

// component instance. This key will be used to remove pending leaving nodes

// component itself.

// component or element

// component prototype. We only need to define computed properties defined

// component v-model

// component v-model doesn't need extra runtime

// component's mounted hook), which relies on vm._watcher being already defined

// component-defined computed properties are already defined on the

// componentName is el.component, take it as argument to shun flow's pessimistic refinement

// components with in Weex's multi-instance scenarios.

// components with only scoped slots to skip forced updates from parent.

// computed properties are just getters during SSR

// condense consecutive whitespaces into single space

// config

// context (optional): If specified, the fragment will be created in this context,

// convert primitive to vnode

// copy other options

// correct value when it hasn't been explicitly set

// count of uncompleted subordinates

// count of unprocessed arguments

// create an empty node and replace it

// create asset registers, so extended classes

// create internal watcher for the computed property.

// create new node

// css base code, injected by the css-loader

// data from the HTML5 data-* attribute

// dataFilter is not invoked for failure responses, so using it instead

// dataPriv.set( el, "click", ... )

// dataPriv.set( this, "blur", ... )

// dataPriv.set( this, "focus", ... )

// dataTypeExpression is optional and defaults to "*"

// deep extended (see ajaxExtend)

// deep updates (#7063).

// default key for nested array children (likely generated by v-for)

// defaults to document

// deferred.done(function() { bind to newDefer or newDefer.resolve })

// deferred.fail(function() { bind to newDefer or newDefer.reject })

// deferred.notify = function() { deferred.notifyWith(...) }

// deferred.notifyWith = list.fireWith

// deferred.progress(function() { bind to newDefer or newDefer.notify })

// deferred.reject = function() { deferred.rejectWith(...) }

// deferred.rejectWith = list.fireWith

// deferred.resolve = function() { deferred.resolveWith(...) }

// deferred.resolveWith = list.fireWith

// define getter functions for harmony exports

// delay insert hooks for component root nodes, invoke them after the

// delay setting the cache until update

// dependencies for deep watching

// descendant combinators, which is not what we want.

// destroy old node

// detect devtools

// detect such cases and filter out values that no longer has a matching

// determine the normalization needed for the children array.

// determine whether component has slot children

// determine whether this is a plain element after

// devtool hook

// devtools global hook

// did it), otherwise encode params recursively.

// direct component options / constructor

// directives first.

// directives may mutate the el's other properties before they are generated.

// directly removing

// disconnected due to the intermediate scope variable)

// disconnected node in IE throws an error

// display for all div elements is set to "inline",

// distribute, sublicense, and/or sell copies of the Software, and to

// do not cache length because more watchers might be pushed

// do not log it twice

// do not make component slot content static. this avoids

// does not trigger because the inner node's created hooks are not called

// doesn't get processed by processAttrs.

// doing this because it's faster than dynamic enumeration.

// don't support it.

// due to cross-origin restrictions

// during Vue.extend(). We only need to proxy props defined at

// during entering.

// during template compilation

// dynamic slot names). Static scoped slots compiled from template has the

// e.g. <option disabled>Select one</option>

// e.g. <template slot="xxx">, <div slot-scope="xxx">

// e.g. <template>, <slot>, v-for, or when the children is provided by user

// e.g. PhantomJS, iOS7, Android 4.4

// e.g. `value` on <progress> w/ non-finite value

// e.g. for directives that uses the "inserted" hook.

// e.g. http://example.com:80x/

// e.g. var jQuery = require("jquery")(window);

// either not server-rendered, or hydration failed.

// electron/nw.js app, since event.timeStamp will be using a different

// elem.tabIndex doesn't always return the

// element is really inserted

// element may have already been removed due to v-html / v-text

// empty component root.

// empty element, allow client to pick up and populate children

// empty mount (likely as component), create new root element

// enable recursive self-lookup

// enough that all such attempts are guarded in a try block.

// ensure a key that is unique to the vnode type and to this transition

// ensure collecting deps for deep class bindings for future updates

// ensure only append when value is already string, otherwise it will be cast

// ensure runtime directive metadata

// equals `i`), unless we didn't visit _any_ elements in the above loop because we have

// error in IE

// errors on any property access that is not readyState

// eslint rule "no-unused-expressions" is disabled for this code

// eslint-disable-next-line eqeqeq

// eslint-disable-next-line func-names

// eslint-disable-next-line no-param-reassign

// eslint-disable-next-line no-unused-expressions

// eslint-disable-next-line prefer-destructuring

// essentially merged when rendered to HTML strings

// even immediately after element creation

// event handlers

// event is fired after handler attachment

// events.

// every time the scheduler flushes and use that for all event listeners

// except "table", "table-cell", or "table-caption"

// except for inputs with v-bind:type

// excess is a negative index

// existing directive, update

// existing plain hook

// explicitness and function inlining.

// expose FunctionalRenderContext for ssr runtime helper installation

// expose normal slots on scopedSlots

// expose real self

// exposed util methods.

// exposing $options for renderStatic()

// expression

// extract listeners and pass them directly to the transition methods

// extract listeners, since these needs to be treated as

// extract props

// extremely rare edge case: do not insert if old element is in a

// faking a content-box to get border and padding (gh-3699)

// fallback to prototype chain

// falling back to the empty string if nothing was stored.

// false or null will remove the attribute but undefined will not

// fast path 1: child component re-render only, parent did not change

// fast path 2: stable scoped slots w/ no normal slots to proxy,

// features are natively supported.

// filter out scoped slots

// filter out text nodes (possible whitespaces)

// final children cleanup

// find first non-whitespace prev char

// find it as the prev node.

// fire destroyed hook

// fires "change" instead of "input" on autocomplete.

// first filter, end of expression

// first pass: mark all non-static nodes.

// fix #11483, Root level <script> tags should not be rendered.

// fixes an issue with getting wrong values

// flow complains about extra args which is why we use any

// flow somehow has problems with directly declared definition object

// focus() and blur() are asynchronous

// focus() and blur() are asynchronous, except when they are no-op.

// focus(in | out) events fire after focus & blur events,

// focus/blur morphs to focusin/out; ensure we're not firing them right now

// for example if the slot contains dynamic names, has v-if or v-for on them...

// for internally calculated Rect objects. For the purposes of

// for lazy watchers

// for script (e.g. type="x/template") or style, do not decode content

// for slot content they should also get the scopeId from the host instance.

// for the description of the bug (it existed in older Chrome versions as well).

// for these fields.

// for transition enter check

// force reflow to put everything in position

// force removing pass

// forces the browser to respect setting selected

// fragment in IE 9

// from DOM nodes, so set to undefined instead

// from an async native handler (gh-4350)

// from identically-valued overflowX and overflowY and Edge just mirrors

// frozen object may not have observer.

// fulfilled_callbacks.disable

// fulfilled_handlers.add( ... )

// fulfilled_handlers.disable

// fulfilled_handlers.fire

// functional

// functional component

// functional template

// generated render function is guaranteed to return Array<VNode>. There are

// getComputedStyle returns percent when specified for top/left/bottom/right;

// getDefaultExport function for compatibility with non-harmony modules

// getElementById can match elements by name instead of ID

// getElementById is not reliable as a find shortcut

// getPropertyValue is needed for:

// gets around this issue.

// hack for #4339: a reactivated component with inner transition

// handle <slot/> outlets

// handle IE svg bug

// handle content being passed to a component as slot,

// handle transition classes

// handle transition mode

// handleObj is passed to all event handlers

// handler w/ dynamic event name

// happens because browsers fire microtask ticks between event propagation.

// has new static slots

// has old static slots

// hasOwn isn't used here due to false negatives

// have mutated.

// helper to dynamically append modifier runtime markers to event names.

// helpers

// hoist static sub-trees out

// http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment

// http://www.matts411.com/post/internet-explorer-9-oninput/

// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked

// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters

// http://www.w3.org/TR/css3-selectors/#whitespace

// http://www.w3.org/TR/selectors/#empty-pseudo

// http://www.w3.org/TR/selectors/#lang-pseudo

// http://www.w3.org/TR/selectors/#pseudo-classes

// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)

// https://bugs.chromium.org/p/chromium/issues/detail?id=470258

// https://bugs.jquery.com/ticket/12359

// https://bugs.jquery.com/ticket/13393

// https://bugs.jquery.com/ticket/4833

// https://bugs.webkit.org/show_bug.cgi?id=136851

// https://bugs.webkit.org/show_bug.cgi?id=137337

// https://drafts.csswg.org/cssom/#common-serializing-idioms

// https://drafts.csswg.org/cssom/#resolved-values

// https://github.com/facebook/flow/issues/285

// https://github.com/w3c/IntersectionObserver/issues/324

// https://github.com/w3c/IntersectionObserver/pull/205

// https://html.spec.whatwg.org/#strip-and-collapse-whitespace

// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled

// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled

// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2

// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace

// https://jsperf.com/thor-indexof-vs-for/5

// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section

// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx

// https://promisesaplus.com/#point-48

// https://promisesaplus.com/#point-54

// https://promisesaplus.com/#point-57

// https://promisesaplus.com/#point-59

// https://promisesaplus.com/#point-61

// https://promisesaplus.com/#point-75

// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/

// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/

// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html

// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click

// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram

// hydrating

// ie9 setting to null has no effect, must use empty string

// if already flushing, splice the watcher based on its id

// if already past its id, it will be run next immediately.

// if at this stage it's not a constructor or an async component factory,

// if childNode is not null, it means the actual childNodes list is

// if has already-rendered static tree and not inside v-for,

// if less slides than to show, go to start.

// if no content

// if not specified.

// if parent is an HOC, update its $el as well

// if the event timestamp, although evaluated AFTER the Date.now(), is

// if the new node is not cloned it means the render functions have been

// if the page has thousands of event listeners. Instead, we take a timestamp

// if the returned array contains only a single node, allow it

// if the user intentionally throws the original error in the handler,

// if the vm is being destroyed.

// if this is a component root node and the component's

// if we're just parsing

// ignore children if the node has textContent or innerHTML,

// ignore slots that contains only whitespace

// immediately.

// implementation and does not fire microtasks in between event propagation, so

// implementations (#9632)

// import a list of modules into the list

// important for dynamic transitions!

// important: remove merged hook to ensure it's called only once

// in a Vue.extend merge, both should be functions

// in a locale-dependent way, using a comma instead of a dot.

// in case of component :is set to falsy value

// in case the child is also an abstract component, e.g. <keep-alive>

// in case the object is already observed...

// in case the options rendered by v-for have changed,

// in case there are no cookies at all. Also prevents odd result when

// in computed dimensions. (gh-4529)

// in each iteration - which helps prevent layout thrashing.

// in leverageNative.

// in non-infinite sliders, we don't want to go past the

// in some cases, the event used has to be determined at runtime

// in that case we can just return the element and be done.

// in that case, element will be second argument

// in the document.

// in this case we want to make sure we are able to get a hold to the

// included in all copies or substantial portions of the Software.

// increase the listeners count

// inherit parent ns if there is one

// init parent attached events

// inject component registration as beforeCreate hook

// inject component styles

// inject is :any because flow is not smart enough to figure out cached

// injected by v-model runtime

// inline hooks to be invoked on component VNodes during patch

// inline or about-to-be-restored)

// inline-template

// innerText usage removed for consistency of new lines (jQuery #11153)

// install component management hooks onto the placeholder node

// install platform patch function

// install platform runtime directives & components

// install platform specific utils

// install runtime convenience helpers

// instance merge

// instantiation here.

// instead of a hash lookup

// instead of the first because it can end up

// internal component options needs special treatment.

// internal version is used by render functions compiled from templates

// invoke callbacks only if this is not a synchronous resolve

// invoke destroy hooks on current rendered tree

// invoke insert hooks that may have been merged by create hooks.

// is applied.

// is based solely on the element's language value

// is needed to cater to all possible types of children values.

// is present, execute the factory and get jQuery.

// isHiddenWithinTree might be called from jQuery#filter function;

// issue #9511

// istanbul ignore if

// istanbul ignore next

// it can be rejected by the transport if it is invalid

// it can get stuck in a weird state where callbacks are pushed into the

// it should've created a child instance and mounted it. the child

// it will also be a sign that checks already performed

// it's important to place the event as the first in the array because

// it's possible for the same component to be reused but with different

// it's possible that the value is out-of-sync with the rendered options.

// iterate and compare children lists

// jQuery handler

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding

// jQuery.proxy is deprecated to promote standards (specifically Function#bind)

// jQuery.support is not used in Core but other projects attach their

// just as Sizzle does

// keep a copy of raw propsData

// keep a reference to the super options at extension time.

// keep copies of post queues before resetting state

// keep it in the children list so that v-else(-if) conditions can

// keep-alive + HOCs. (#4590)

// keepScripts (optional): If true, will include scripts passed in the html string

// kept-alive components, treat as a patch

// key

// key events that do not have keyCode property...

// key/values into a query string

// lang value must be a valid identifier

// last visible index.

// later at instantiation we can check if Super's options have

// leading to errors. We need to check for `getRootNode`.

// leaving `result` undefined. We need to guard against this.

// leaving transition. Only happens when combining transition +

// left/right

// less bad than duplication.

// list of modules that can skip create hook during hydration because they

// list with an ID selector referencing the scope context.

// locate first non-abstract parent

// longer than the virtual children list.

// loop through the breakpoints and cut out any existing

// loop through the responsive object and splice out duplicates.

// make current key freshest

// make sure the key filters only apply to KeyboardEvents

// make sure to clone it if it's reactive, since the user likely wants

// make sure to invoke the insert hook

// make sure to observe it.

// makes the latter nonnegative.

// manually mounted instance, call mounted on self

// mark el non-plain so data gets generated

// mark element as dynamic

// mark the event as captured

// mark v-show

// marker for reverse proxying v-slot without scope on this.$slots

// matchesSelector(:active) reports false when true (IE9/Opera 11.5)

// may return an Array instead of a single root. In this case, just a simple

// merge adjacent text nodes

// merge custom directives

// merge custom modules

// merge helper so that class/style/mustUseProp attrs are handled correctly.

// merge options

// merge static and dynamic style data on the same vnode

// microtask queue but the queue isn't being flushed, until the browser

// modifiers

// module data generation functions

// module transforms

// mounted is called for render-created child components in its inserted hook

// mounting to a real element

// multiple renders, cloning them avoids errors when DOM manipulations rely

// named slots should only be respected if the vnode was rendered in the

// native event and prevent that from happening again here.

// necessary to ensure parent re-render when deep bindings like :style and

// need to resolve new options.

// needed during codegen.

// needs to do some other work, e.g. handle a timer. Therefore we can

// never gets called

// new directive, bind

// new parent vnode

// no bubbling, should always fire.

// no default, return undefined

// no element matchers and no seed.

// no existing hook

// no longer present, unbind

// node.  All pre nodes are static roots, so we can use this as a location to

// nodeType < 6 works because attributes (2) do not appear as children

// nodeType defaults to 9, since context defaults to document

// non root node in pre blocks with no attributes

// non-string values will be stringified

// non-xml :nth-child(...) stores cache data on `parent`

// normal directives

// normalization is always applied for the public version, used in

// normalization is needed - if any child is an Array, we flatten the whole

// normalize click.right and click.middle since they don't actually fire

// normalize possible array / string values into Object

// normalize v-model event tokens that can only be determined at runtime.

// normalized at this point

// not a built-in

// not equal to the updated value

// not included

// note it doesn't support other MathML elements being component roots

// note we only do this if the vnode is cloned -

// note: this only removes the attr from the Array (attrsList) so that it

// notify change

// now it's used as a new node, overwriting its elm would cause

// nth-* requires argument

// numeric x and y parameters for Expr.filter.CHILD

// numerically zero.

// object syntax in v-bind

// observe data

// of going through the normal attribute patching process.

// of the default converter is kludgy but it works.

// offset() relates an element's border box to the document origin

// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border

// on a disconnected node (IE 9)

// on detached elements

// on incorrect children. Instead we push them into a queue which will

// on subsequent patches (#3360)

// on the option

// on their elm reference.

// on this.$slots because the usage is semantically a normal slot.

// ones with the same breakpoint number, we don't want dupes.

// only cast empty string / same name to boolean if

// only for non-scoped slots

// only for non-scoped slots.

// only need to normalize once

// only trigger breakpoints during an actual break. not on initialize.

// only used in dev mode

// optimize hook:event cost by using a boolean flag marked at registration

// optimize internal component instantiation

// optimize single v-for

// optimized shallow clone

// option in the DOM.

// option.text throws exceptions (#14686, #14858)

// options

// options in Safari work properly

// or :nth-last-child(...) or :nth(-last)?-of-type(...)

// or <html> element, update the intersection rect.

// or beginning with the identifier C immediately followed by "-".

// or even between bubbling of the same event (#6566).

// or strings [capture 3 or capture 4]"

// or when there is no matching style property that exists.

// other than props & listeners & slot

// otherwise step value is 2 to skip over Left and Right

// otherwise we skip this part

// otherwise, render a fresh tree.

// out of sync with VDOM state due to focus, composition and modifiers.

// outweigh the benefits and it's better off to just always render it fresh.

// parent container node also has transition, skip.

// parse arg

// parse expression for getter

// parseFloat NaNs numeric-cast false positives ("")

// parser/optimizer/codegen, e.g the SSR optimizing compiler.

// patch existing root node

// permit persons to whom the Software is furnished to do so, subject to

// pipe

// plain options object: turn it into a constructor

// pop stack

// position() relates an element's margin box to its offset parent's padding box

// position:fixed elements are offset from the viewport, which itself always has zero offset

// potential patch errors down the road when it's used as an insertion

// pre

// pre-resolve slots for renderSlot()

// preserve slot as an attribute for native shadow DOM compat

// prevent it from double-processed

// prevent triggering an input event for no reason

// process for on the main node

// progress_callbacks.lock

// progress_handlers.add( ... )

// progress_handlers.fire

// progress_handlers.lock

// promise.done = list.add

// promise.fail = list.add

// promise.progress = list.add

// prop and event handler respectively.

// properties to it so it needs to exist.

// props

// proxy data on instance

// prune oldest entry

// pseudo-class names are case-insensitive

// public mount method

// push text token

// push.apply(_, arraylike) throws on ancient WebKit

// qSA considers elements outside a scoping root when evaluating child or

// qSa(:focus) reports false when true (Chrome 21)

// queue the flush

// rather than make the css module depend on the offset module, just check for it here

// real context instance.

// record leaving element

// record original tag name for components using "is" attribute

// recursively invoke hooks on child component root node

// recursively search for possible transition defined inside the component root

// ref

// ref #5318

// reference node. Instead, we clone the node on-demand before creating

// regarding Nodelist length in IE

// register component module identifier for async chunk inference

// register for functional component in vue file

// reject.

// rejected_callbacks.disable

// rejected_handlers.add( ... )

// rejected_handlers.disable

// rejected_handlers.fire

// release circular reference (#6759)

// release memory in IE

// rely on checking whether it's in an inactive tree (e.g. router-view)

// remember that false/true cast respectively to 0/1

// remove __vue__ reference

// remove children as they are returned from scopedSlots now

// remove pending leave element on enter by injecting an insert hook

// remove reference from data ob

// remove self from parent

// remove self from vm's watcher list

// remove slot attribute if the node is resolved as a Vue slot node

// remove trailing whitespace node

// remove trailing whitespace node again

// removing structural attributes

// render functions

// replace old child transition data with fresh one

// replace with listeners with .native modifier

// replaced by innerHTML/textContent retains its parentNode property

// replacing existing element

// reset by the hot-reload-api and we need to do a proper re-render.

// resize and scroll events or DOM mutations.

// resolve constructor options in case global mixins are applied after

// resolve injections before data/props

// resolve provide after data/props

// resolve slots + force update if has children

// resolve template/el and convert to render function

// respecting firingIndex overrides and runtime changes

// results is for internal usage only

// retrieved value as a content box dimension.

// return a placeholder node for async component, which is rendered

// return a placeholder vnode

// return empty vnode in case the render function errored out

// return handler return value for single handlers

// return in case resolved synchronously

// return placeholder node and queue update when leave finishes

// return previous default value to avoid unnecessary watcher trigger

// return the list of modules as css string

// return true when textbox (.number and .trim) loses focus and its value is

// returns true if it also needs a runtime counterpart.

// reuse element for static trees.

// root but the previous entry for this target had an intersection,

// root instance props should be converted

// safe to exclude.

// same context.

// same key but different element. treat as new element

// same timestamp type when saving the flush timestamp.

// same way that tag soup parsers do. So we cannot shorten

// save current target element in closure

// scoped slot

// scoped slots

// scopedId

// second pass: mark static roots.

// see flow/vnode

// separately from one another. Nested component's render fns are called

// sequential events (e.g. #4521, #6690, which have workarounds)

// server build

// set attribute for blank value

// set in CSS while `offset*` properties report correct values.

// set new value

// set parent

// set parent vnode. this allows render functions to have access

// set scope id attribute for scoped CSS.

// set the class

// setting _inactive to false here so that a render function can

// setting a boolean content attribute,

// setting or getting the value

// since dynamic options merging is pretty slow, and none of the

// since it considers such accessions noop

// since it's otherwise lost when execution goes async

// since its presence should be enough

// since the default value is a fresh copy,

// since the watcher's initial patch may call $forceUpdate (e.g. inside child

// since they are user-defined.

// skip all element-related modules except for ref (#3455)

// skip the update if old and new VDOM state is the same.

// slot props are camelized

// slot target

// slot="xxx"

// smaller than it, it means the event is using a hi-res timestamp,

// so $("p:first").is("p:last") won't return true for a doc with two "p".

// so any parsed elements with URLs

// so it gets processed during parent component patch.

// so migrate can support jQuery.sub (gh-2101)

// so that event delegation works in jQuery.

// so that the transition module can hand over the control to the directive

// so that we get proper render context inside it.

// so they're executed at the same time to save the second computation.

// so use a roundabout getElementsByName test

// so we used some reserved tokens during compile.

// some property updates can throw

// some versions of this test; make sure not to make it pass there!

// spaces as combinators

// specially universal or its namespaces are a superset of the event's.

// specific event

// specific handler

// stabilize the subscriber list first

// start at index 1 to avoid re-invoking component mounted hook

// start enter transition

// starting reference

// state = "rejected"

// state = "resolved" (i.e., fulfilled)

// stateful

// static props are already proxied on the component's prototype

// static style is pre-processed into an object during compilation

// statically analyzing the template at compile time.

// store normalized style under a different key for next diff

// store value as _value as well since

// strings and numbers (primitives or objects)

// structural directives

// subordinate callback factory

// subordinate fulfillment data

// subsequent errors

// subtraction forces infinities to NaN

// super option changed,

// support .foo shorthand syntax for the .prop modifier

// support for compiled functional template

// support single function children as default scoped slot

// supports it & if we're not changing the context.

// surrogate pair

// switching focus before confirming composition choice

// synthetic events by interrupting progress until reinvoked in response to

// tag token

// tags it will allow on a page

// teardown watchers

// technically allowfullscreen is a boolean attribute for <iframe>,

// text

// that can be coerced to finite numbers (gh-2662)

// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).

// that handler calls `.remove()` on the element, the data is cleared,

// that pass the validator function

// that should not be matched to match.

// that takes "flat" options (not to be deep extended)

// the Vue instances at extension time, on the extended prototype. This

// the `nonce` attribute is reset to an empty string whenever it

// the context vm passed in is a functional context as well.

// the delayed leave may have already been cancelled

// the document rect, so no need to compute a new intersection.

// the following are added in 2.6

// the following conditions:

// the generated code of all the slot contents.

// the information will be used for async server-rendering and hydration.

// the object here.

// the only target envs that have right/middle clicks.

// the overflowX value there.

// the primary Deferred

// the raw prop value was also undefined from previous render,

// the ready event fires. See #6781

// the result of another mergeOptions call.

// the root of the child tree

// the select element.

// the solution is simple: we save the timestamp when a handler is attached,

// the whole point is ensuring the v-model callback gets called before

// them unless you are aware of the risk.

// then remove the whole classname (if there was one, the above saved it).

// there doesn't seem to be a better way to do it.

// there is still data from a stopped show/hide

// these are also reactive so they may trigger child update if the child

// these are reserved for web because they are directly compiled away

// these keywords should not appear inside expressions, but operators like

// these unary operators should not be used as property/method names

// they need to be reactive so that HOCs using them are always updated

// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep

// this also fixes the issue where some browsers e.g. iOS Chrome

// this by omitting <tbody> or other required elements.

// this is a slot using the new v-slot syntax without scope. although it is

// this is a somewhat expensive operation so we skip it

// this is implemented as a special case to avoid the overhead

// this is just a safety net in case event.timeStamp is unreliable in

// this is necessary for SSR hydration because text nodes are

// this is technically browser-specific, but at least for now browsers are

// this is used to identify the "base" constructor to extend all plain-object

// this just defines when we can count on it).

// this needs to be lazy-evaled because vue may be required before

// this throws a TypeError, but we will just return undefined.

// thresholds, add a new entry.

// throw an exception if an attempt to read a data cache is made.

// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode

// timeout handle

// timestamp can either be hi-res (relative to page load) or low-res

// to avoid forcing a reflow.

// to avoid treating leading and trailing

// to be registered via Vue.use() as well as Vue.component()

// to handle uncaught aborts

// to missing dependency), remove it.

// to mutate it.

// to operate correctly into non-standard environments

// to string and cause the type check to miss.

// to the data on the placeholder node.

// top or left is auto and position is either absolute or fixed

// transform component v-model data into props & events

// transform component v-model info (value and callback) into

// transition at this very moment, we make a clone of it and remove

// tree management

// tslint:disable-next-line:no-var-requires

// turn code into functions

// turn off all instance listeners.

// two cases where extra normalization is needed:

// two documents; shallow comparisons work.

// typeof, instanceof and in are allowed

// uid for batching

// uncached part of the url

// unguarded in another place, it seems safer to define global only for this module

// unlike a newly created component,

// update $attrs and $listeners hash

// update __vue__ reference

// update base extend options

// update child tree's parent

// update listeners

// update parent placeholder node element, recursively

// update props

// update vm's placeholder node without re-render

// updated listeners

// updated props

// updates

// use default namespace inside foreignObject

// use expires attribute, max-age is not supported by IE

// use getRealChild() to ignore abstract components e.g. keep-alive

// use native Set when available.

// use plain assignment

// used by ssr in case component is cached and beforeCreate

// used for static nodes and slot nodes because they may be reused across

// used them during render

// user can override it through ajaxSetup method

// user-attached handlers.

// user-written render functions.

// v-bind

// v-bind data wrap

// v-bind dynamic argument wrap

// v-bind with dynamic arguments must be applied using the same v-bind object

// v-html and domProps: innerHTML

// v-if with v-once should generate code like (a)?_m(0):_m(1)

// v-on

// v-on data wrap

// v-once

// v-once cached trees

// v-slot on <template>

// v-slot on component, denotes default slot

// validation and default values are handled in the child

// via an object.

// via either native Promise.then or MutationObserver.

// vue-router#1212

// vue-server-renderer can set VUE_ENV

// want to modify the value if it is a CSS custom property

// want to query the value if it is a CSS custom property

// warn about them ASAP rather than swallowing them by default.

// warn against non-factory defaults for Object & Array

// warn against non-primitive key

// warn if v-bind:value conflicts with v-model

// warn invalid mode

// warn multiple elements

// we are only extracting raw values here.

// we can reuse the same tree.

// we divide the work into three loops to avoid mixing DOM reads and writes

// we have a recursively passed down rm callback

// we know it's MountedComponentVNode but flow doesn't

// we need to do this before overwriting $options._renderChildren.

// we set this to vm._watcher inside the watcher's constructor

// we want to recursively retrieve the real component to be rendered

// webpackBootstrap

// well.

// when a statically positioned element is identified

// when an event is called after a page has unloaded

// when in an optgroup

// when parent component is patched.

// when the value is the same, because the value may

// when using Object.defineProperty, so we have to procedurally build up

// whenever `document.activeElement` is accessed on an iframe

// where microtasks have too high a priority and fire in between supposedly

// which causes a problem only in Android 8 Chrome 86.

// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order

// which value to return, respectively either:

// will be null.

// will dequeue but only if they were gotoEnd.

// will not be confused with a leftover capture object.

// will result in `undefined` for elem = this[ 0 ] which will

// with both ajaxSettings and settings fields.

// with direct calls to dataPriv methods, these can be deprecated.

// with hand-written render functions / JSX. In such cases a full normalization

// without getting yelled at by flow

// without limitation the rights to use, copy, modify, merge, publish,

// work around Firefox's Object.prototype.watch...

// work around IE bug when accessing document.activeElement in an iframe

// work around flow

// wrap a state change and reset it upon exiting the pre node.

// wrapper function for providing a more flexible interface

// wtf flow?

// xml :nth-child(...)

// you can add your own custom options here if

// {

// {display: ["-webkit-box", "-ms-flexbox", "flex"]}

// }

// こちらはCSSファイル読み込みのimport

// アンカーの値取得 リンク先（href）を取得して、hrefという変数に代入

// スクロールの速度（ミリ秒）

// スムーススクロール linear（等速） or swing（変速）

// 監視実行

//$(".js-hidden").css("visibility","visible");

//Dont slide if the cursor is inside the form fields and arrow keys are pressed

//activeでないボタンだった場合のみ動作

//console.log(target.children.length);

//const foobar = require('image-map-resizer');

//import imagemapresizer from 'image-map-resizer';

//import isMobile from 'ismobilejs';

//lazyLoad: 'ondemand',// or 'progressive'

//observer.disconnect()

//var isSmartPhone = isMobile.phone;

//クッキーに変数を保存

//クリックしたボタンをactive

//クリックした要素のID名を変数にセット

//ボタンをクリックしたら実行

//一度classを除去して、変数をclassとして追加

//変数が空ならfontMを、空でなければクッキーに保存しておいたものを適用

//変数にクッキー名を入れる

//現在activeのついているclassを削除

//適用する箇所を指定。今回は部分的に#test内のpに
